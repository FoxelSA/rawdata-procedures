#!/bin/bash
# rawdata-procedures - Camera raw data procedures
#
# Copyright (c) 2013-2015 FOXEL SA - http://foxel.ch
# Please read <http://foxel.ch/license> for more information.
#
#
# Author(s):
#
#       Nils Hamel <n.hamel@foxel.ch>
#
#
# This file is part of the FOXEL project <http://foxel.ch>.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
# Additional Terms:
#
#       You are required to preserve legal notices and author attributions in
#       that material or in the Appropriate Legal Notices displayed by works
#       containing it.
#
#       You are required to attribute the work as explained in the "Usage and
#       Attribution" section of <http://foxel.ch/license>.

# Script switch #
AS_DOWN="FALSE"
AS_KEEP="FALSE"

# Script parameters #
AS_MOUNT=""
AS_MACAD=""
AS_TIMES=""

# Arguments and parameters #
arguments() {

    # Search in arguments #
    while [[ $# > 0 ]]; do

        args="$1"
        shift
        case $args in
            --download)
                AS_DOWN="TRUE"
            ;;
            --keep-intermediates)
                AS_KEEP="TRUE"
            ;;
            --mount-point)
                AS_MOUNT="$1"
                shift
            ;;
            --mac-address)
                AS_MACAD="$1"
                shift
            ;;
            --master-timestamp)
                AS_TIMES="$1"
                shift
            ;;
        esac

    done

}

# Auto-segmentation : process #
process() {

    # Creates directories #
    >&2 echo "rawdata-autoseg : creating directories ..."
    mkdir -p $AS_SEG
    mkdir -p $AS_RAW/csps
    mkdir -p $AS_RAW/csps/dissolved
    mkdir -p $AS_RAW/csps/approved
    mkdir -p $AS_RAW/csps/merged
    mkdir -p $AS_RAW/csps/decomposed
    mkdir -p $AS_RAW/csps/validated

    # Performs audit #
    >&2 echo "rawdata-autoseg : auditing logs-files ..."
    csps-elphel-audit -p $AS_RAW/mov/1/ > $AS_RAW/csps/audit-raw.log

    # Perform logs-files processing #
    >&2 echo "rawdata-autoseg : dissolving logs-files ..."
    csps-elphel-decompose -s $AS_RAW/mov/1/ -d $AS_RAW/csps/dissolved -i 0.5 > $AS_RAW/csps/logs-dissolved.log

    # Performs audit #
    >&2 echo "rawdata-autoseg : auditing logs-files ..."
    csps-elphel-audit -p $AS_RAW/csps/dissolved > $AS_RAW/csps/audit-dissolved.log

    # Perform logs-files processing #
    >&2 echo "rawdata-autoseg : approving logs-files ..."
    csps-elphel-validate -s $AS_RAW/csps/dissolved -d $AS_RAW/csps/approved > $AS_RAW/csps/logs-approved.log

    # Performs audit #
    >&2 echo "rawdata-autoseg : auditing logs-files ..."
    csps-elphel-audit -p $AS_RAW/csps/approved > $AS_RAW/csps/audit-approved.log

    # Perform logs-files processing #
    >&2 echo "rawdata-autoseg : merging logs-files ..."
    csps-elphel-merge -s $AS_RAW/csps/approved -d $AS_RAW/csps/merged > $AS_RAW/csps/logs-megred.log

    # Performs audit #
    >&2 echo "rawdata-autoseg : auditing logs-files ..."
    csps-elphel-audit -p $AS_RAW/csps/merged > $AS_RAW/csps/audit-merged.log

    # Perform logs-files processing #
    >&2 echo "rawdata-autoseg : decomposing logs-files ..."
    csps-elphel-decompose -s $AS_RAW/csps/merged -d $AS_RAW/csps/decomposed -i 0.5 > $AS_RAW/csps/logs-decomposed.log

    # Performs audit #
    >&2 echo "rawdata-autoseg : auditing logs-files ..."
    csps-elphel-audit -p $AS_RAW/csps/decomposed > $AS_RAW/csps/audit-decomposed.log

    # Perform logs-files processing #
    >&2 echo "rawdata-autoseg : decimating logs-files ..."
    csps-elphel-gps -s $AS_RAW/csps/decomposed -d $AS_RAW/csps/validated > $AS_RAW/csps/logs-validated.log

    # Performs audit #
    >&2 echo "rawdata-autoseg : auditing logs-files ..."
    csps-elphel-audit -p $AS_RAW/csps/validated > $AS_RAW/csps/audit-validated.log

    # Perform auto-segment broadcasting #
    >&2 echo "rawdata-autoseg : broadcasting auto-segments ..."
    echo "Broadcasting : $AS_MACAD:$AS_TIMES" > $AS_RAW/csps/logs-broadcast.log

    # Auto-segment broadcasting #
    for AS_ENUM in $(ls $AS_RAW/csps/validated); do

        # Retrieve auto-segment timestamp #
        MTS=$(csps-elphel-cat -l $AS_RAW/csps/validated/$AS_ENUM -m)
        echo "    $AS_ENUM -> $MTS"
        echo "    $AS_ENUM -> $MTS" >> $AS_RAW/csps/logs-broadcast.log

        # Creates CSPS-specific directories #
        mkdir -p $AS_SEG/$MTS
        mkdir -p $AS_SEG/$MTS/csps
        mkdir -p $AS_SEG/$MTS/csps/devices
        mkdir -p $AS_SEG/$MTS/csps/devices/eyesis4pi
        mkdir -p $AS_SEG/$MTS/csps/streams
        mkdir -p $AS_SEG/$MTS/info/

        # Broadcasting logs-file #
        ln -f $AS_RAW/csps/validated/$AS_ENUM $AS_SEG/$MTS/csps/devices/eyesis4pi/fpga-log.bin

        # Retrieve default topology #
        cp -f $AS_MOUNT/camera/$AS_MACAD/csps/csps-topology $AS_SEG/$MTS/csps/topology

        # CSPS processing #
        csps-process -p $AS_SEG/$MTS/csps -t $AS_SEG/$MTS/csps/topology > /dev/null

        # CSPS exportation #
        csps-export -p $AS_SEG/$MTS/csps -e $AS_SEG/$MTS/info/segment.json \
        -c eyesis4pi -m mod-DSIDE -g ls20031   -n mod-SGNQF \
        -i adis16375 -s mod-IFETI -t adis16375 -k mod-ISRAD > /dev/null

    done  

    # Delete intermediates #
    if [ "$AS_KEEP" == "FALSE" ]; then

        rm -rf $AS_RAW/csps/dissolved
        rm -rf $AS_RAW/csps/approved
        rm -rf $AS_RAW/csps/merged
        rm -rf $AS_RAW/csps/decomposed

    fi

    # State file #
    touch $AS_RAW/csps/logs-processed.log

}

# Auto-segmentation : unprocess #
unprocess() {

    # Perform removal procedure #
    >&2 echo "rawdata-autoseg : remove previous structure ..."

    # Delete CSPS-specific directory #
    rm -rf $AS_RAW/csps

    # Delete CSPS-specific directory #
    if [ -d $AS_SEG ]; then

        for AS_ENUM in $(ls $AS_SEG); do

            if [ -d $AS_SEG/$AS_ENUM/csps ]; then

                rm -rf $AS_SEG/$AS_ENUM/csps

            fi

        done

    fi

}

# Arguments and parameters #
arguments $@

# Directory standard structure #
AS_RAW=$AS_MOUNT/rawdata/$AS_MACAD/master/$AS_TIMES
AS_SEG=$AS_MOUNT/rawdata/$AS_MACAD/master/$AS_TIMES/segment

# Directory verification #
if [ ! -d $AS_MOUNT/rawdata/$AS_MACAD/master ] || [ ! -d $AS_MOUNT/camera/$AS_MACAD/fastcal ] || [ ! -d $AS_MOUNT/camera/$AS_MACAD/csps ]; then

    # Exit point #
    >&2 echo "rawdata-autoseg : unknown directory structure ..."
    exit 1

fi

# Processing switches #
if [ "$AS_DOWN" == "TRUE" ]; then

    # Auto-segmentation #
    unprocess; process; echo "--auto-segmented"

    # Exit point #
    >&2 echo "rawdata-autoseg : done"
    exit 0

elif [ -d $AS_RAW/csps ] && [ ! -f $AS_RAW/csps/logs-processed.log ]; then

    # Auto-segmentation #
    unprocess; process; echo "--auto-segmented"

    # Exit point #
    >&2 echo "rawdata-autoseg : done"
    exit 0

elif [ ! -f $AS_RAW/csps/logs-processed.log ]; then

    # Auto-segmentation #
    process; echo "--auto-segmented"

    # Exit point #
    >&2 echo "rawdata-autoseg : done"
    exit 0

else

    # Exit point #
    >&2 echo "rawdata-autoseg : nothing to do ..."
    exit 0

fi

