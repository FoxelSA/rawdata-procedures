#!/bin/bash
# rawdata-procedures - Camera raw data procedures
#
# Copyright (c) 2013-2015 FOXEL SA - http://foxel.ch
# Please read <http://foxel.ch/license> for more information.
#
#
# Author(s):
#
#       Nils Hamel <n.hamel@foxel.ch>
#
#
# This file is part of the FOXEL project <http://foxel.ch>.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
# Additional Terms:
#
#       You are required to preserve legal notices and author attributions in
#       that material or in the Appropriate Legal Notices displayed by works
#       containing it.
#
#       You are required to attribute the work as explained in the "Usage and
#       Attribution" section of <http://foxel.ch/license>.

# Script switch #
AS_DOWN="FALSE"
AS_KEEP="FALSE"

# Script parameters #
AS_MOUNT=""
AS_MACAD=""
AS_TIMES=""

# Script working directories #
AS_SYNC=""
AS_SEGM=""

# Arguments and parameters parser #
arguments() {

    # Search in arguments #
    while [[ $# > 0 ]]; do

        args="$1"
        shift
        case $args in
            --download)
                AS_DOWN="TRUE"
            ;;
            --keep-intermediates)
                AS_KEEP="TRUE"
            ;;
            --mount-point)
                AS_MOUNT="$1"
                shift
            ;;
            --mac-address)
                AS_MACAD="$1"
                shift
            ;;
            --master-timestamp)
                AS_TIMES="$1"
                shift
            ;;
        esac

    done

}

# Processing function #
process() {

    # Creates CSPS/csps-suite sync-specific directories #
    >&2 echo "rawdata-autoseg : creating directories ..."
    mkdir -p $AS_SYNC/csps
    mkdir -p $AS_SYNC/csps/dissolved
    mkdir -p $AS_SYNC/csps/approved
    mkdir -p $AS_SYNC/csps/merged
    mkdir -p $AS_SYNC/csps/decomposed
    mkdir -p $AS_SYNC/csps/validated

    # Perform audit logs-files #
    >&2 echo "rawdata-autoseg : auditing logs-files ..."
    csps-elphel-audit \
    -p $AS_SYNC/mov/1/ \
    > $AS_SYNC/csps/audit-raw.log

    # Perform logs-files dissolution #
    >&2 echo "rawdata-autoseg : dissolving logs-files ..."
    csps-elphel-decompose \
    -s $AS_SYNC/mov/1/ \
    -d $AS_SYNC/csps/dissolved \
    -i 0.5 \
    > $AS_SYNC/csps/logs-dissolved.log

    # Perform audit logs-files #
    >&2 echo "rawdata-autoseg : auditing logs-files ..."
    csps-elphel-audit \
    -p $AS_SYNC/csps/dissolved \
    > $AS_SYNC/csps/audit-dissolved.log

    # Perform logs-files approbation #
    >&2 echo "rawdata-autoseg : approving logs-files ..."
    csps-elphel-validate \
    -s $AS_SYNC/csps/dissolved \
    -d $AS_SYNC/csps/approved \
    > $AS_SYNC/csps/logs-approved.log

    # Perform audit logs-files #
    >&2 echo "rawdata-autoseg : auditing logs-files ..."
    csps-elphel-audit \
    -p $AS_SYNC/csps/approved \
    > $AS_SYNC/csps/audit-approved.log

    # Perform logs-files merging #
    >&2 echo "rawdata-autoseg : merging logs-files ..."
    csps-elphel-merge \
    -s $AS_SYNC/csps/approved \
    -d $AS_SYNC/csps/merged \
    > $AS_SYNC/csps/logs-megred.log

    # Perform audit logs-files #
    >&2 echo "rawdata-autoseg : auditing logs-files ..."
    csps-elphel-audit \
    -p $AS_SYNC/csps/merged \
    > $AS_SYNC/csps/audit-merged.log

    # Perform logs-files decomposition #
    >&2 echo "rawdata-autoseg : decomposing logs-files ..."
    csps-elphel-decompose \
    -s $AS_SYNC/csps/merged \
    -d $AS_SYNC/csps/decomposed \
    -i 0.5 \
    > $AS_SYNC/csps/logs-decomposed.log

    # Perform audit logs-files #
    >&2 echo "rawdata-autoseg : auditing logs-files ..."
    csps-elphel-audit \
    -p $AS_SYNC/csps/decomposed \
    > $AS_SYNC/csps/audit-decomposed.log

    # Perform logs-files decimation #
    >&2 echo "rawdata-autoseg : decimating logs-files ..."
    csps-elphel-gps \
    -s $AS_SYNC/csps/decomposed \
    -d $AS_SYNC/csps/validated \
    > $AS_SYNC/csps/logs-validated.log

    # Perform audit logs-files #
    >&2 echo "rawdata-autoseg : auditing logs-files ..."
    csps-elphel-audit \
    -p $AS_SYNC/csps/validated \
    > $AS_SYNC/csps/audit-validated.log

    # Perform segment broadcasting #
    >&2 echo "rawdata-autoseg : broadcasting segments ..."
    echo "Broadcasting : $AS_MACAD:$AS_TIMES" > $AS_SYNC/csps/logs-broadcast.log

    # Create segment master allocation #
    mkdir -p $AS_SEGM  

    # Broadcasting loop #
    for AS_ENUM in $(ls $AS_SYNC/csps/validated); do

        # Retrieve segment timestamp marker #
        MTS=$(csps-elphel-cat -l $AS_SYNC/csps/validated/$AS_ENUM -m)

        # Create segment CSPS/csps-suite sub-directories #
        mkdir -p $AS_SEGM/$MTS
        mkdir -p $AS_SEGM/$MTS/csps
        mkdir -p $AS_SEGM/$MTS/csps/devices
        mkdir -p $AS_SEGM/$MTS/csps/devices/eyesis4pi
        mkdir -p $AS_SEGM/$MTS/csps/streams
        mkdir -p $AS_SEGM/$MTS/info/rawdata-autoseg

        # Logs-file hard-linking #
        ln -f \
        $AS_SYNC/csps/validated/$AS_ENUM \
        $AS_SEGM/$MTS/csps/devices/eyesis4pi/fpga-log.bin

        # Copy topology file #
        cp -f \
        $AS_MOUNT/camera/$AS_MACAD/info/rawdata-autoseg/csps-topology-gps \
        $AS_SEGM/$MTS/csps/topology

        # CSPS segment processing #
        csps-process \
        -p $AS_SEGM/$MTS/csps \
        -t $AS_SEGM/$MTS/csps/topology \
        > /dev/null

        # JSON file verification #
        if [ ! -e $AS_SEGM/$MTS/info/rawdata-autoseg/segment.json ]; then

            csps-export \
            -p $AS_SEGM/$MTS/csps \
            -e $AS_SEGM/$MTS/info/rawdata-autoseg/segment.json \
            -c eyesis4pi \
            -m mod-DSIDE \
            -g ls20031 \
            -n mod-SGNQF \
             > /dev/null

        fi

        # Broadcasting logs #
        echo "    $AS_ENUM -> $(basename $AS_SEGM/$MTS)" \
        >> $AS_SYNC/csps/logs-broadcast.log

    done  

    # Delete intermediates #
    if [ "$AS_KEEP" == "FALSE" ]; then

        rm -rf $AS_SYNC/csps/dissolved
        rm -rf $AS_SYNC/csps/approved
        rm -rf $AS_SYNC/csps/merged
        rm -rf $AS_SYNC/csps/decomposed

    fi

    # Processing end-flag #
    touch $AS_SYNC/csps/logs-processed.log

}

# Unprocessing function #
unprocess() {

    # Perform removal procedure #
    >&2 echo "rawdata-autoseg : remove previous structure ..."

    # Delete CSPS/csps-suite sync-specific directory #
    rm -rf $AS_SYNC/csps

    # Directory verification #
    if [ -d $AS_SEGM ]; then

        for AS_ENUM in $(ls $AS_SEGM); do

            # Delete CSPS/csps-suite segment-specific directory */
            rm -rf $AS_SEGM/$AS_ENUM/csps

        done

    fi

}

# Argument and parameters #
arguments $@

# Define working directories #
AS_SYNC=$AS_MOUNT/camera/$AS_MACAD/raw/sync/$AS_TIMES
AS_SEGM=$AS_MOUNT/camera/$AS_MACAD/raw/segment/$AS_TIMES

# Directory verification #
if [ ! -d $AS_MOUNT/camera/$AS_MACAD/raw ]; then

    # Exit script #
    >&2 echo "rawdata-autoseg : unable to locate [raw] directory ..."
    exit 1

fi

# State verification #
if [ "$AS_DOWN" == "TRUE" ]; then

    # Processing functions #
    unprocess
    process

    # Return processed flag #
    echo "--auto-segmented"

    # Exit script #
    >&2 echo "rawdata-autoseg : done"
    exit 0

elif [ -d $AS_SYNC/csps ] && [ ! -f $AS_SYNC/csps/logs-processed.log ]; then

    # Processing functions #
    unprocess
    process

    # Return processed flag #
    echo "--auto-segmented"

    # Exit script #
    >&2 echo "rawdata-autoseg : done"
    exit 0

elif [ ! -f $AS_SYNC/csps/logs-processed.log ]; then

    # Processing functions #
    process

    # Return processed flag #
    echo "--auto-segmented"

    # Exit script #
    >&2 echo "rawdata-autoseg : done"
    exit 0

else

    # Exit script #
    >&2 echo "rawdata-autoseg : nothing to do ..."
    exit 0

fi

