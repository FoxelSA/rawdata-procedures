#!/bin/bash
# rawdata-procedures - Auto-segmentation
#
# Copyright (c) 2013-2014 FOXEL SA - http://foxel.ch
# Please read <http://foxel.ch/license> for more information.
#
#
# Author(s):
#
#       Nils Hamel <n.hamel@foxel.ch>
#
#
# This file is part of the FOXEL project <http://foxel.ch>.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
# Additional Terms:
#
#       You are required to preserve legal notices and author attributions in
#       that material or in the Appropriate Legal Notices displayed by works
#       containing it.
#
#       You are required to attribute the work as explained in the "Usage and
#       Attribution" section of <http://foxel.ch/license>.

# Define variables #
MNT=$1
MAC=$2
TMS=$3

# Define sync/segment path #
PATH_SYNC=$MNT/camera/$MAC/raw/sync/$TMS
PATH_SEGM=$MNT/camera/$MAC/raw/segment/$TMS

# Camera device detection #
device_detect() {

    # Device detection from MAC  #
    if   [ ${1^^} = "00-0E-64-08-1B-6E" ]; then
        echo "elphel"
    elif [ ${1^^} = "00-0E-64-08-1C-D2" ]; then
        echo "elphel"
    elif [ ${1^^} = "00-0E-64-08-1B-51" ]; then
        echo "elphel"
    elif [ ${1^^} = "00-0E-64-08-1C-EE" ]; then
        echo "elphel"
    fi

}

# Camera model detection #
model_detect() {

    # Model detection from MAC #
    if   [ ${1^^} = "00-0E-64-08-1B-6E" ]; then
        echo "eyesis4pi"
    elif [ ${1^^} = "00-0E-64-08-1C-D2" ]; then
        echo "eyesis4pi"
    elif [ ${1^^} = "00-0E-64-08-1B-51" ]; then
        echo "triclope"
    elif [ ${1^^} = "00-0E-64-08-1C-EE" ]; then
        echo "nc535l-369"
    fi

}

# Create CSPS processing topology file #
topology() {

    echo "device cam" > $1
    echo "    model EYESIS4PI" >> $1
    echo "    tag eyesis4pi" >> $1
    echo "    block 1024" >> $1
    echo "end" >> $1
    echo "device imu" >> $1
    echo "    model ADIS16375" >> $1
    echo "    tag adis16375" >> $1
    echo "    block 1024" >> $1
    echo "    downsampling-frequency 60" >> $1
    echo "    initial-conditions-x-rotation +0.0" >> $1
    echo "    initial-conditions-y-rotation +0.0" >> $1
    echo "    initial-conditions-z-rotation -1.57079632679489655800" >> $1
    echo "end" >> $1
    echo "device gps" >> $1
    echo "    model LS20031" >> $1
    echo "    tag ls20031" >> $1 
    echo "    block 1024" >> $1
    echo "end" >> $1
    echo "module cam-mod-DSIDE" >> $1
    echo "    eyesis4pi" >> $1
    echo "end" >> $1
    echo "module gps-mod-DSIDE" >> $1
    echo "    ls20031" >> $1
    echo "end" >> $1
    echo "module gps-mod-SGNQF" >> $1
    echo "    ls20031" >> $1
    echo "    mod-DSIDE" >> $1
    echo "end" >> $1
    echo "module imu-mod-DSIDE" >> $1 
    echo "    adis16375" >> $1
    echo "end" >> $1
    echo "module imu-mod-SGSFR" >> $1 
    echo "    adis16375" >> $1
    echo "    mod-DSIDE" >> $1
    echo "end" >> $1
    echo "module imu-mod-SGNDN" >> $1 
    echo "    adis16375" >> $1
    echo "    mod-SGSFR" >> $1
    echo "end" >> $1
    echo "module imu-mod-IOBMA" >> $1
    echo "    adis16375" >> $1
    echo "    ls20031" >> $1
    echo "    mod-SGNQF" >> $1
    echo "end" >> $1
    echo "module imu-mod-IFICR" >> $1
    echo "    adis16375" >> $1
    echo "    mod-IOBMA" >> $1
    echo "end" >> $1
    echo "module imu-mod-IFETI" >> $1
    echo "    adis16375" >> $1
    echo "    mod-SGNDN" >> $1 
    echo "    mod-IFICR" >> $1
    echo "end" >> $1

}

# Processing function #
process() {

    # Creates CSPS/csps-suite sync-specific directories #
    mkdir -p $PATH_SYNC/csps
    mkdir -p $PATH_SYNC/csps/decomposed
    mkdir -p $PATH_SYNC/csps/recomposed
    mkdir -p $PATH_SYNC/csps/validated

    # Perform audit on raw logs-files #
    echo "  auditing raw logs-files ..."
    csps-$(device_detect $MAC)-audit \
        -p $PATH_SYNC/mov/1/ \
         > $PATH_SYNC/csps/audit-raw.log

    # Perform logs-files decomposition #
    echo "  decomposing raw logs-files ..."
    csps-$(device_detect $MAC)-decompose \
        -r $PATH_SYNC/mov/1/ -d $PATH_SYNC/csps/decomposed -i 1.0 \
         > $PATH_SYNC/csps/logs-decompose.log

    # Perform audit on decomposed logs-files #
    echo "  auditing decomposed logs-files ..."
    csps-$(device_detect $MAC)-audit \
        -p $PATH_SYNC/csps/decomposed \
         > $PATH_SYNC/csps/audit-decompose.log

    # Perform logs-files recomposition #
    echo "  recomposing decomposed logs-files ..."
    csps-$(device_detect $MAC)-recompose \
        -d $PATH_SYNC/csps/decomposed -r $PATH_SYNC/csps/recomposed -i 1.0 \
         > $PATH_SYNC/csps/logs-recompose.log

    # Perform audit on recomposed logs-files #
    echo "  auditing recomposed logs-files ..."
    csps-$(device_detect $MAC)-audit \
        -p $PATH_SYNC/csps/recomposed \
         > $PATH_SYNC/csps/audit-recompose.log

    # Perform logs-files validation #
    echo "  validating recomposed logs-files ..."
    csps-$(device_detect $MAC)-validate \
        -r $PATH_SYNC/csps/recomposed -v $PATH_SYNC/csps/validated -i 5.0 \
         > $PATH_SYNC/csps/logs-validate.log

    # Perform audit on validated logs-files #
    echo "  auditing validated logs-files ..."
    csps-$(device_detect $MAC)-audit \
        -p $PATH_SYNC/csps/validated \
         > $PATH_SYNC/csps/audit-validate.log

    # Create CSPS/csps-suite segments-specific directories #
    echo "  creating and CSPS-processing segments ..."
    echo "Segments broadcasting : $MAC:$TMS :" \
         > $PATH_SYNC/csps/logs-broadcast.log
    mkdir $PATH_SEGM

    # Create segments directories #
    for SEGS in $(ls $PATH_SYNC/csps/validated); do

        # Retrieve initial master timestamp #
        MTS=$(csps-$(device_detect $MAC)-cat -l $PATH_SYNC/csps/validated/$SEGS -m)

        # Create segment main directory #
        mkdir -p $PATH_SEGM/$MTS

        # Create segment CSPS/csps-suite sub-directories #
        mkdir -p $PATH_SEGM/$MTS/csps
        mkdir -p $PATH_SEGM/$MTS/csps/devices
        mkdir -p $PATH_SEGM/$MTS/csps/devices/$(model_detect $MAC)
        mkdir -p $PATH_SEGM/$MTS/csps/streams
        mkdir -p $PATH_SEGM/$MTS/csps/exports

        # Create hard-link to logs-file in sync #
        ln \
        $PATH_SYNC/csps/validated/$SEGS \
        $PATH_SEGM/$MTS/csps/devices/$(model_detect $MAC)/fpga-log.bin

        # Create CSPS processing topology file #
        topology $PATH_SEGM/$MTS/csps/topology

        # Processing CSPS #
        csps-process \
            -p $PATH_SEGM/$MTS/csps \
            -t $PATH_SEGM/$MTS/csps/topology \
             > /dev/null

        # Json-file generation #
        csps-export \
            -p $PATH_SEGM/$MTS/csps \
            -e $PATH_SEGM/$MTS/csps/exports/rawdata-navigator.json \
            -c eyesis4pi \
            -m mod-DSIDE \
            -g ls20031 \
            -n mod-SGNQF \
             > /dev/null

        # Logging segments broadcasting #
        echo "  Broadcast $SEGS segment in $(basename $PATH_SEGM/$MTS)" \
             >> $PATH_SYNC/csps/logs-broadcast.log

    done

    # Create processed data marker #
    touch $PATH_SYNC/csps/logs-processed.log

}

# Unprocessing function #
unprocess() {

    # Safe-remove sync csps-specific directory #
    echo "  removing CSPS-data in sync ..."
    rm    --force                    $PATH_SYNC/csps/validated/*
    rmdir --ignore-fail-on-non-empty $PATH_SYNC/csps/validated
    rm    --force                    $PATH_SYNC/csps/recomposed/*
    rmdir --ignore-fail-on-non-empty $PATH_SYNC/csps/recomposed
    rm    --force                    $PATH_SYNC/csps/decomposed/*
    rmdir --ignore-fail-on-non-empty $PATH_SYNC/csps/decomposed
    rm    --force                    $PATH_SYNC/csps/*
    rmdir --ignore-fail-on-non-empty $PATH_SYNC/csps

    # Safe-remove segment csps-specific directory #
    echo "  removing CSPS-data in segments ..."
    for SEGS in $(ls $PATH_SEGM); do

        # Safe-remove directory and contents #
        rm    --force                    $PATH_SEGM/$SEGS/csps/devices/$(model_detect $MAC)/*
        rmdir --ignore-fail-on-non-empty $PATH_SEGM/$SEGS/csps/devices/$(model_detect $MAC)
        rmdir --ignore-fail-on-non-empty $PATH_SEGM/$SEGS/csps/devices
        rm    --force                    $PATH_SEGM/$SEGS/csps/streams/*
        rmdir --ignore-fail-on-non-empty $PATH_SEGM/$SEGS/csps/streams
        rm    --force                    $PATH_SEGM/$SEGS/csps/exports/*
        rmdir --ignore-fail-on-non-empty $PATH_SEGM/$SEGS/csps/exports
        rm    --force                    $PATH_SEGM/$SEGS/csps/*
        rmdir --ignore-fail-on-non-empty $PATH_SEGM/$SEGS/csps
        rmdir --ignore-fail-on-non-empty $PATH_SEGM/$SEGS

    done

    # Safe-remove segment master directory #
    rmdir --ignore-fail-on-non-empty $PATH_SEGM

}

# Detect state of the sync-allocation #
if [ -d $PATH_SYNC/csps ]; then

    # Verify processed data marker #
    if [ -e $PATH_SYNC/csps/logs-processed.log ]; then

        # Processing already terminated #
        echo "auto-segment ($TMS|$MAC) : Already processed"

    else 

        # Remove unterminated processing #
        echo "auto-segment ($TMS|$MAC) : Removing unterminated processing"
        unprocess

        # Processing #
        echo "auto-segment ($TMS|$MAC) : Reprocessing"
        process

    fi

else

    # Processing #
    echo "auto-segment ($TMS|$MAC) : Processing"
    process

fi

# Exit point #
exit 0

