#!/bin/bash
# rawdata-procedures - Camera raw data procedures
#
# Copyright (c) 2013-2015 FOXEL SA - http://foxel.ch
# Please read <http://foxel.ch/license> for more information.
#
#
# Author(s):
#
#       Nils Hamel <n.hamel@foxel.ch>
#
#
# This file is part of the FOXEL project <http://foxel.ch>.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
# Additional Terms:
#
#       You are required to preserve legal notices and author attributions in
#       that material or in the Appropriate Legal Notices displayed by works
#       containing it.
#
#       You are required to attribute the work as explained in the "Usage and
#       Attribution" section of <http://foxel.ch/license>.

# Script switch #
AS_DOWN="FALSE"
AS_KEEP="FALSE"
AS_AUDI="FALSE"

# Script parameters #
AS_MOUNT=""
AS_MACAD=""
AS_TIMES=""

# Script configuration #
AS_SEGS=2.0     # Decomposition minimum interval #
AS_SIZE=9542400 # One minute of record @ 2Hz - 60*64*(2460+20+2) #

# Arguments and parameters #
arguments() {

    # Search in arguments #
    while [[ $# > 0 ]]; do

        args="$1"
        shift
        case $args in
            --download)
                AS_DOWN="TRUE"
            ;;
            --keep-intermediates)
                AS_KEEP="TRUE"
            ;;
            --avoid-audit)
                AS_AUDI="TRUE"
            ;;
            --mount-point)
                AS_MOUNT="$1"
                shift
            ;;
            --mac-address)
                AS_MACAD="$1"
                shift
            ;;
            --master-timestamp)
                AS_TIMES="$1"
                shift
            ;;
        esac

    done

}

# Auto-segmentation : echos #
echos() {

    >&2 echo $1

}

# Auto-segmentation : process #
process() {

    # Creates directories #
    echos "rawdata-autoseg : creating directories ..."
    mkdir -p $AS_SEG
    mkdir -p $AS_RAW/csps
    mkdir -p $AS_RAW/csps/merged
    mkdir -p $AS_RAW/csps/sorted
    mkdir -p $AS_RAW/csps/repaired
    mkdir -p $AS_RAW/csps/validated

    # Perform audit #
    if [ "$AS_AUDI" == "FALSE" ]; then
    echos "rawdata-autoseg : auditing logs-files ..."
    csps-elphel-audit -p $AS_RAW/mov/1/ > $AS_RAW/csps/audit-raw.log
    fi

    # Perform logs-files processing #
    echos "rawdata-autoseg : merging logs-files ..."
    csps-elphel-merge -s $AS_RAW/mov/1/ -d $AS_RAW/csps/merged > $AS_RAW/csps/logs-merged.log

    # Perform audit #
    if [ "$AS_AUDI" == "FALSE" ]; then
    echos "rawdata-autoseg : auditing logs-files ..."
    csps-elphel-audit -p $AS_RAW/csps/merged > $AS_RAW/csps/audit-merged.log
    fi

    # Perform logs-files processing #
    echos "rawdata-autoseg : sorting logs-files ..."
    csps-elphel-sort -s $AS_RAW/csps/merged -d $AS_RAW/csps/sorted > $AS_RAW/csps/logs-sorted.log

    # Perform audit #
    if [ "$AS_AUDI" == "FALSE" ]; then
    echos "rawdata-autoseg : auditing logs-files ..."
    csps-elphel-audit -p $AS_RAW/csps/sorted > $AS_RAW/csps/audit-sorted.log
    fi

    # Perform logs-files processing #
    echos "rawdata-autoseg : repairing logs-files ..."
    csps-elphel-repair -s $AS_RAW/csps/sorted -d $AS_RAW/csps/repaired > $AS_RAW/csps/logs-repaired.log

    # Perform audit #
    if [ "$AS_AUDI" == "FALSE" ]; then
    echos "rawdata-autoseg : auditing logs-files ..."
    csps-elphel-audit -p $AS_RAW/csps/repaired > $AS_RAW/csps/audit-repaired.log
    fi

    # Perform logs-files processing #
    echos "rawdata-autoseg : decomposing logs-files ..."
    csps-elphel-decompose -s $AS_RAW/csps/repaired -d $AS_RAW/csps/validated -i $AS_SEGS > $AS_RAW/csps/logs-validated.log

    # Perform audit #
    if [ "$AS_AUDI" == "FALSE" ]; then
    echos "rawdata-autoseg : auditing logs-files ..."
    csps-elphel-audit -p $AS_RAW/csps/validated > $AS_RAW/csps/audit-validated.log
    fi

    # Intermediates management #
    if [ "$AS_KEEP" == "FALSE" ]; then

        # Removing intermediates #
        echos "rawdata-autoseg : removing intermediates ..."
        rm -rf $AS_RAW/csps/merged
        rm -rf $AS_RAW/csps/sorted
        rm -rf $AS_RAW/csps/repaired

    fi

    # Processing state file #
    touch $AS_RAW/csps/logs-processed.log

}

# Auto-segmentation : auto-segments broadcasting #
broadcast() {

    # Broadcasting logs #
    echo "Broadcasting : $AS_MACAD:$AS_TIMES" > $AS_RAW/csps/logs-broadcasting.log

    # Perform auto-segments broadcasting #
    echos "rawdata-autoseg : broadcasting auto-segments ..."
    for AS_ENUM in $(ls $AS_RAW/csps/validated/); do

        # Extract auto-segment timestamp #
        AS_ASTS=$(csps-elphel-cat -l $AS_RAW/csps/validated/$AS_ENUM -m)

        # Validation on size #
        if [ $(stat -c%s $AS_RAW/csps/validated/$AS_ENUM) -lt $AS_SIZE ]; then

            # Broadcasting logs #
            echos "$AS_ENUM discared    with $AS_ASTS"

            # Display broadcasting information #
            echo "    $AS_ENUM discared    with $AS_ASTS" >> $AS_RAW/csps/logs-broadcasting.log

        else

            # Broadcasting logs #
            echos "$AS_ENUM broadcasted with $AS_ASTS"

            # Display broadcasting information #
            echo "    $AS_ENUM broadcasted with $AS_ASTS" >> $AS_RAW/csps/logs-broadcasting.log

            # Creates directories #
            mkdir -p $AS_SEG/$AS_ASTS
            mkdir -p $AS_SEG/$AS_ASTS/csps
            mkdir -p $AS_SEG/$AS_ASTS/csps/devices
            mkdir -p $AS_SEG/$AS_ASTS/csps/devices/eyesis4pi
            mkdir -p $AS_SEG/$AS_ASTS/csps/streams
            mkdir -p $AS_SEG/$AS_ASTS/info/

            # Broadcasting logs-file #
            ln -f $AS_RAW/csps/validated/$AS_ENUM $AS_SEG/$AS_ASTS/csps/devices/eyesis4pi/fpga-log.bin

            # Broadcasting topology #
            cp -f $AS_MOUNT/camera/$AS_MACAD/csps/csps-topology $AS_SEG/$AS_ASTS/csps/topology

            # CSPS processing and exportation #
            csps-process -p $AS_SEG/$AS_ASTS/csps -t $AS_SEG/$AS_ASTS/csps/topology > /dev/null
            csps-export  -p $AS_SEG/$AS_ASTS/csps -e $AS_SEG/$AS_ASTS/info/segment.json \
                         -c eyesis4pi -m mod-DSIDE -g ls20031   -n mod-SGNQF \
                         -i adis16375 -s mod-IFETI -t adis16375 -k mod-ISRAD > /dev/null  

        fi

    done

}

# Auto-segmentation : unprocess #
unprocess() {

    # Perform removal procedure #
    echos "rawdata-autoseg : remove previous structure ..."
    rm -rf $AS_RAW/csps
    if [ -d $AS_SEG ]; then
        for AS_ENUM in $(ls $AS_SEG); do
            if [ -d $AS_SEG/$AS_ENUM ]; then
                if [ -d $AS_SEG/$AS_ENUM/csps ]; then
                    rm -rf $AS_SEG/$AS_ENUM/csps
                fi
            fi
            rmdir --ignore-fail-on-non-empty $AS_SEG/$AS_ENUM
        done
        rmdir --ignore-fail-on-non-empty $AS_SEG
    fi

}

# Arguments and parameters #
arguments $@

# Directory standard structure #
AS_RAW=$AS_MOUNT/rawdata/$AS_MACAD/master/$AS_TIMES
AS_SEG=$AS_MOUNT/rawdata/$AS_MACAD/master/$AS_TIMES/segment

# Directory verification #
if [ ! -d $AS_MOUNT/rawdata/$AS_MACAD/master ] || [ ! -d $AS_MOUNT/camera/$AS_MACAD/fastcal ] || [ ! -d $AS_MOUNT/camera/$AS_MACAD/csps ]; then

    # Exit point #
    echos "rawdata-autoseg : unknown directory structure ..."
    exit 1

fi

# Processing switches #
if [ "$AS_DOWN" == "TRUE" ]; then

    # Auto-segmentation #
    unprocess; process; broadcast; echo "--auto-segmented"

    # Exit point #
    echos "rawdata-autoseg : done"
    exit 0

elif [ -d $AS_RAW/csps ] && [ ! -f $AS_RAW/csps/logs-processed.log ]; then

    # Auto-segmentation #
    unprocess; process; broadcast; echo "--auto-segmented"

    # Exit point #
    echos "rawdata-autoseg : done"
    exit 0

elif [ ! -f $AS_RAW/csps/logs-processed.log ]; then

    # Auto-segmentation #
    process; broadcast; echo "--auto-segmented"

    # Exit point #
    echos "rawdata-autoseg : done"
    exit 0

else

    # Exit point #
    echos "rawdata-autoseg : nothing to do ..."
    exit 0

fi
