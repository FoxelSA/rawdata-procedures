#!/bin/bash
# rawdata-procedures - Camera raw data procedures
#
# Copyright (c) 2013-2015 FOXEL SA - http://foxel.ch
# Please read <http://foxel.ch/license> for more information.
#
#
# Author(s):
#
#       Nils Hamel <n.hamel@foxel.ch>
#       Alexandre Kraft <a.kraft@foxel.ch>
#
# Contributor(s):
#
#       Kevin Velickovic <k.velickovic@foxel.ch>
#
#
# This file is part of the FOXEL project <http://foxel.ch>.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
# Additional Terms:
#
#       You are required to preserve legal notices and author attributions in
#       that material or in the Appropriate Legal Notices displayed by works
#       containing it.
#
#       You are required to attribute the work as explained in the "Usage and
#       Attribution" section of <http://foxel.ch/license>.

# Script execution switch #
SWITCH_DOWNLOAD=""
SWITCH_SNAPSHOT=""

# Script parameters #
PARAM_MOUNT="/data/"
PARAM_MAC=""
PARAM_MASTER=""
PARAM_SEGMENT=""

# Arguments and parameters parser #
arguments() {

    # Search in arguments #
    while [[ $# > 0 ]]; do

        # Read argument #
        args="$1"; shift

        # Switch on argument #
        case $args in
            --download)
                SWITCH_DOWNLOAD="TRUE"
            ;;
            --snapshot)
                SWITCH_SNAPSHOT="TRUE"
            ;;
            --mount-point)
                PARAM_MOUNT="$1"; shift
            ;;
            --mac-address)
                PARAM_MAC="$1"; shift
            ;;
            --master-timestamp)
                PARAM_MASTER="$1"; shift
            ;;
            --segment-timestamp)
                PARAM_SEGMENT="$1"; shift
            ;;
        esac

    done

}

# Argument and parameters #
arguments $@

# Check execution consistency #
if [ ! -d $PARAM_MOUNT/camera ] || [ ! -d $PARAM_MOUNT/rawdata ] || [ ! -d $PARAM_MOUNT/system ]; then

    # Exit script #
    echo "[$(date '+%F %R')] rawdata-procedure : unable to access standard directory with specified mount point"
    exit 1

fi

# Check execution consistency #
if [ -n "SWITCH_DOWNLOAD" ] && [ -n "SWITCH_SNAPSHOT" ]; then

    # Exit script #
    echo "[$(date '+%F %R')] rawdata-procedure : unable to understand --download with --snapshot switch"
    exit 1

fi

# Check execution consistency #
if [ -n "$SWITCH_DOWNLOAD" ] || [ -n "$SWITCH_SNAPSHOT" ]; then

    # Check execution consistency #
    if [ -n "$PARAM_MAC" ] || [ -n "$PARAM_MASTER" ] || [ -n "$PARAM_SEGMENT" ]; then

        # Exit script #
        echo "[$(date '+%F %R')] rawdata-procedure : unable to understand --download/--snapshot switch with --mac-address/--master-timestamp/--segment-timestamp parameters"
        exit 1

    fi

    # Run procedure #
    echo "[$(date '+%F %R')] rawdata-procedures : downloading raw data ..."
    RETURN=$(rawdata-downloader $@)

    # Check procedure status #
    if [ $? -ne 0 ]; then

        # Exit script #
        echo "[$(date '+%F %R')] rawdata-procedure : rawdata-downloader fail to proceed"
        exit 1

    fi

    # Extract MAC address and master timestamp #
    ARRAY=($RETURN); PARAM_MAC=${ARRAY[0]}; PARAM_MASTER=${ARRAY[1]}

fi

# Check execution consistency #
if [ -z "$PARAM_MAC" ] || [ -z "$PARAM_MASTER" ]; then

    # Exit script #
    echo "[$(date '+%F %R')] rawdata-procedure : cannot continue execution without --mac-address/--master-timestamp parameters"
    exit 1

fi

# Check execution consistency #
if [ ! -d "$PARAM_MOUNT/rawdata/$PARAM_MAC/master/$PARAM_MASTER" ]; then

    # Exit script #
    echo "[$(date '+%F %R')] rawdata-procedure : cannot access master allocation"
    exit 1

fi

# Check execution consistency #
if [ -n "$PARAM_SEGMENT" ] && [ ! -d "$PARAM_MOUNT/rawdata/$PARAM_MAC/master/$PARAM_MASTER/segment/$PARAM_SEGMENT" ]; then

    # Exit script #
    echo "[$(date '+%F %R')] rawdata-procedure : cannot access segment allocation"
    exit 1

fi

# Run procedure #
echo "[$(date '+%F %R')] rawdata-procedures : auto-segmentation ..."
RETURN=$(rawdata-autoseg --mount-point $PARAM_MOUNT --mac-address $PARAM_MAC --master-timestamp $PARAM_MASTER $@)

# Check procedure #
if [ $? -ne 0 ]; then

    # Exit script #
    echo "[$(date '+%F %R')] rawdata-procedure : rawdata-autoseg failed"
    exit 1

fi

# Run procedure #
echo "[$(date '+%F %R')] rawdata-procedures : creating table of jp4 files ..."
rawdata-jp4table --mount-point $PARAM_MOUNT --mac-address $PARAM_MAC --master-timestamp $PARAM_MASTER $@ $RETURN

# Check procedure #
if [ $? -ne 0 ]; then

    # Exit script #
    echo "[$(date '+%F %R')] rawdata-procedure : rawdata-jp4table failed"
    exit 1

fi

# Run procedure #
echo "[$(date '+%F %R')] rawdata-procedures : creating table of trashed jp4 files ..."
rawdata-jp4trasher --mount-point $PARAM_MOUNT --mac-address $PARAM_MAC --master-timestamp $PARAM_MASTER $@ $RETURN

# Check procedure #
if [ $? -ne 0 ]; then

    # Exit script #
    echo "[$(date '+%F %R')] rawdata-procedure : rawdata-jp4trasher failed"
    exit 1

fi

# Run procedure #
echo "[$(date '+%F %R')] rawdata-procedures : pushing data into database ..."
rawdata-dbpusher --mount-point $PARAM_MOUNT --mac-address $PARAM_MAC --master-timestamp $PARAM_MASTER $@ $RETURN

# Check procedure #
if [ $? -ne 0 ]; then

    # Exit script #
    echo "[$(date '+%F %R')] rawdata-procedure : rawdata-dbpusher failed"
    exit 1

fi

# Run procedure #
echo "[$(date '+%F %R')] rawdata-procedures : splitting mov files ..."
rawdata-movsplit --mount-point $PARAM_MOUNT --mac-address $PARAM_MAC --master-timestamp $PARAM_MASTER $@ $RETURN

# Check procedure #
if [ $? -ne 0 ]; then

    # Exit script #
    echo "[$(date '+%F %R')] rawdata-procedure : rawdata-movsplit failed"
    exit 1

fi

# Run procedure #
echo "[$(date '+%F %R')] rawdata-procedures : generating image previews ..."
rawdata-jp4preview --mount-point $PARAM_MOUNT --mac-address $PARAM_MAC --master-timestamp $PARAM_MASTER $@ $RETURN

# Check procedure #
if [ $? -ne 0 ]; then

    # Exit script #
    echo "[$(date '+%F %R')] rawdata-procedure : rawdata-jp4preview failed"
    exit 1

fi

# Exit script #
exit 0

