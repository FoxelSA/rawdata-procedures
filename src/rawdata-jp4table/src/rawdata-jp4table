#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
  rawdata-procedures - Camera raw data procedures

  Copyright (c) 2013-2015 FOXEL SA - http://foxel.ch
  Please read <http://foxel.ch/license> for more information.


  Author(s):

       Kevin Velickovic <k.velickovic@foxel.ch>


  This file is part of the FOXEL project <http://foxel.ch>.

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU Affero General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Affero General Public License for more details.

  You should have received a copy of the GNU Affero General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.


  Additional Terms:

       You are required to preserve legal notices and author attributions in
       that material or in the Appropriate Legal Notices displayed by works
       containing it.

       You are required to attribute the work as explained in the "Usage and
       Attribution" section of <http://foxel.ch/license>.
"""

import ConfigParser
import glob
import os
import struct
import sys
import Queue
import time
import re
import threading
import calendar
import socket
from cStringIO import StringIO
from datetime import datetime
from operator import itemgetter

import exifread
from pycheckjpeg import validate_jpeg_from_buffer

# Global config variables
Threads_Sleep_Delay = 0.1

# Global variables
CORRUPTED_COUNT = 0
QUEUE_Done      = 0
QUEUE_Count     = 0
QUEUE_Slots     = []
PROCESSED_LIST  = []

# Main binary file structure parameters
MAIN_STRUCT = 'i i i i h'
MAIN_SIZE   = struct.calcsize(MAIN_STRUCT)
MAIN_DATA   = struct.Struct(MAIN_STRUCT)

# State file binary structure parameters
STATE_STRUCT = 'i i h'
STATE_SIZE   = struct.calcsize(STATE_STRUCT)
STATE_DATA   = struct.Struct(STATE_STRUCT)

# MOV file container class
class MovFile:
    def __init__(self, path, modulename):
        self.path = path
        self.filename = os.path.basename(path)
        self.timestamp = int(self.filename.split('_')[0])
        self.microtimestamp = int(self.filename.split('_')[1][:-4])
        self.module = int(modulename)

# Function to print debug messages
def ShowMessage(Message, Type=0, Halt=0, SameLine=0):

    NO_COLORS = 0

    # Flush stderr
    sys.stderr.flush()

    # Get current date
    DateNow = datetime.now().strftime("%Y-%m-%d %H:%M")

    # Get script name
    scriptName = "%s :" % os.path.basename(__file__)

    # Return type
    RetChar = '\n'

    if SameLine:
        RetChar = '\r'

    if Type == 0:
        if NO_COLORS:
            sys.stderr.write("\033[K[%s INFO] %s %s%s" % (DateNow, scriptName, Message, RetChar))
        else:
            sys.stderr.write("\033[K[%s \033[32mINFO\033[39m] %s %s%s" % (DateNow, scriptName, Message, RetChar))
    elif Type == 1:
        if NO_COLORS:
            sys.stderr.write("\033[K[%s WARNING] %s %s%s" % (DateNow, scriptName, Message, RetChar))
        else:
            sys.stderr.write("\033[K[%s \033[33mWARNING\033[39m] %s %s%s" % (DateNow, scriptName, Message, RetChar))
    elif Type == 2:
        if NO_COLORS:
            sys.stderr.write("\033[K[%s ERROR] %s %s%s" % (DateNow, scriptName, Message, RetChar))
        else:
            sys.stderr.write("\033[K[%s \033[31mERROR\033[39m] %s %s%s" % (DateNow, scriptName, Message, RetChar))
    elif Type == 3:
        if NO_COLORS:
            sys.stderr.write("\033[K[%s DEBUG] %s %s%s" % (DateNow, scriptName, Message, RetChar))
        else:
            sys.stderr.write("\033[K[%s \033[34mDEBUG\033[39m] %s %s%s" % (DateNow, scriptName, Message, RetChar))

    # Flush stderr
    sys.stderr.flush()

    # Halt program if requested
    if Halt:
        sys.exit()

# Function to find all occurences of a given input
def find_all(a_str, sub):
    start = 0
    while True:
        # Find first element
        start = a_str.find(sub, start)

        # If no match found exit function
        if start == -1: return

        # If there is a match return it and process the next element
        yield start

        # Move pointer to next occurence
        start += len(sub)

# Function to get camera modules count by reading FastCal calibration file
def GetCameraModules(FastCalKeyFilePath):

    # Instanciate ConfigParser
    config = ConfigParser.RawConfigParser()

    # Read FastCal calibration file and prepend a fake [section] to comply with ConfigParser
    config.readfp(StringIO('[calibration]\n' + open(FastCalKeyFilePath, 'r').read()))

    # Return value
    return config.getint('calibration', 'modules')

# Function to get cores settings
def GetCores(ParallelConfigFile):

    # Get local machine hostname
    hostName = socket.gethostname()

    # Open config file
    with open(ParallelConfigFile, 'r') as configFile:

        # Iterate over file lines
        for line in configFile:

            # Exclude comments
            if not '#' in line[0]:

                # Extract entry
                entry = re.search( r'(\d+)/(.*)\@(.*)', line)

                # Check if username corresponds
                if hostName in entry.group( 3 ):

                    # Return result
                    return int( entry.group( 1 ) )

    # Default value
    return 1

# Function to get first available slot
def GetSlot(Slots):

    # Iterate over slots
    for i in range(0, len(Slots)):

        # If slot is not used return it
        if Slots[i] == 0:
            return i

# Function to count used slots
def UsedSlots(Slots):

    # Local result variable
    ret = 0

    # Iterate over slots
    for i in range(0, len(Slots)):

        # If slot is used increment result
        if Slots[i] == 1:
            ret += 1

    # Return result
    return ret

# Function to trash an EXIF corrupted image
# pylint: disable=W0603
def TrashImage_EXIF(TrashFolder, ImageData):

    # Global variable
    global CORRUPTED_COUNT

    # Create output trash dir if not exists
    if not os.path.isdir(TrashFolder):
        os.makedirs(TrashFolder)

    # Save corrupted image
    with open("%s/exif_fail_%d.jp4" % (TrashFolder, CORRUPTED_COUNT), 'w') as f:
        f.write(ImageData)

    # Increment index
    CORRUPTED_COUNT += 1

# Function to trash an integrity corrupted image
def TrashImage_Integrity(TrashFolder, Timestamp, MicroTimestamp, Module, ImageData):

    # Create output trash dir if not exists
    if not os.path.isdir(TrashFolder):
        os.makedirs(TrashFolder)

    # Save corrupted image
    with open("%s/%010d_%06d_%d.jp4" % (TrashFolder, Timestamp, MicroTimestamp, Module), 'w') as f:
        f.write(ImageData)

# Function to validate EXIF data contents
def ValidateEXIFData(EXIFData):

    # Check if EXIF data is present
    if not EXIFData:
        return False

    # Verify micro timestamp entry presence
    if 'EXIF SubSecTimeOriginal' in EXIFData:

        # Verify micro timestamp
        if not str( EXIFData["EXIF SubSecTimeOriginal"] ).isdigit():
            return False
    else:
        return False

    # Verify image date entry presence
    if 'Image DateTime' in EXIFData:

        # Midnight fix
        _DateTime = str(EXIFData["Image DateTime"]).replace('24:00:00', '00:00:00')

        # Verify image date
        _Exp = re.compile(r"^([0-9]+\:[0-9]+\:[0-9]+\s[0-9]+\:[0-9]+\:[0-9]+)$")
        if not _Exp.match( _DateTime ):
            return False

    else:
        return False

    # Return True if all tests passed
    return True

def indexMOV(InputFile, EXIFTrashFolder, IntegrityTrashFolder, tid=0):

    # Local variables
    JPEGHeader    = b'\xff\xd8\xff\xe1'

    # Read input MOV file
    mov = open(InputFile.path, 'rb')
    mov_data = mov.read()
    mov.close()

    # Search all JPEG files inside the MOV file
    JPEG_Offsets     = list(find_all(mov_data, JPEGHeader))

    # Variable to store results
    Result = [[], tid, InputFile]

    # Iterate over all images
    for _Index, _Offset in enumerate(JPEG_Offsets):

        # Calculate the filesize for extraction
        if (_Index >= len(JPEG_Offsets) - 1):
            Size = len(mov_data) - _Offset
        else:
            Size = (JPEG_Offsets[_Index+1] - _Offset)

        # Extract JPEG from MOV file
        ImageData = mov_data[_Offset:(Size + _Offset if Size is not None else None)]

        # Extract EXIF data from JPEG file
        ImageData_File = StringIO(ImageData)
        EXIF_Tags = exifread.process_file(ImageData_File)
        ImageData_File.close()

        # Verify EXIF data integrity
        if not ValidateEXIFData(EXIF_Tags):

            # Debug output
            ShowMessage("Image with corrputed EXIF data in MOV file %s" % InputFile.path, 1)

            # Trash image
            TrashImage_EXIF(EXIFTrashFolder, ImageData)

        else:

            # Chceck image integrity
            jpeg_messages = validate_jpeg_from_buffer(ImageData)

            # Midnight fix
            _DateTime = str(EXIF_Tags["Image DateTime"]).replace('24:00:00', '00:00:00')

            # Get date object
            date_object = datetime.strptime(_DateTime, '%Y:%m:%d %H:%M:%S')

            # Get timestamp
            Timestamp    = calendar.timegm(date_object.utctimetuple())

            # Get microseconds timestamp
            Microseconds = int( str(EXIF_Tags["EXIF SubSecTimeOriginal"]) )

            # Check presence of error or warning messages
            if jpeg_messages[0] or jpeg_messages[1]:

                # Debug output
                ShowMessage("Corrupted image (%10d_%06d_%d.jp4) in MOV file %s" % (Timestamp, Microseconds, InputFile.module, InputFile.path), 1)

                # Trash image
                TrashImage_Integrity(IntegrityTrashFolder, Timestamp, Microseconds, InputFile.module, ImageData)

            # Append results to array
            Result[0].append([
                Timestamp,
                Microseconds,
                InputFile.timestamp,
                InputFile.microtimestamp,
                InputFile.module
            ])

    # Return results
    return Result

# Function to sort a JP4Table file
def sortTable( tableFile ):

    # Open file
    bin_file = open(tableFile, "rb")

    # Read file
    BINARY_DATA = bin_file.read()

    # Close file
    bin_file.close()

    # Determine data length
    Len = len(BINARY_DATA)

    # Determine entries count
    Count = Len / MAIN_SIZE

    # Initialize variables
    Offset = MAIN_SIZE

    # Iterate over entries count
    TEMP_LIST = []
    for i in range(0, Count):

        # Unpack binary values
        Unpacked = MAIN_DATA.unpack( BINARY_DATA[MAIN_SIZE * i : Offset] )

        # Append element
        TEMP_LIST.append( Unpacked )

        # Increment offset
        Offset += MAIN_SIZE

    # Sort elements
    Sorted = sorted(TEMP_LIST, key=itemgetter(0))

    # Save sorted elements
    with open(tableFile, "wb") as f:
        for i in Sorted:
            f.write(MAIN_DATA.pack(*i))

# Thread function to index MOV files
def indexMOV_Thread(Threads, InputFile, EXIFTrashFolder, IntegrityTrashFolder, tid):

    # Add action to queue
    Threads.put(
        indexMOV(InputFile, EXIFTrashFolder, IntegrityTrashFolder, tid)
    )

# MOV counting data collector
# pylint: disable=W0602
def WorkerThread_indexCollector(Source, OutputFile, StateFile):

    # Global variables
    global QUEUE_Done, QUEUE_Slots

    # Infinite while
    while QUEUE_Done != -1:

        # Check if results queue is not empty
        if not Source.empty():

            # Retrieve the result
            Ret = Source.get()

            # Sort indexes
            Results = sorted(Ret[0], key=itemgetter(0))

            # Unlock thread slot
            QUEUE_Slots[Ret[1]] = 0

            # Check if results contains any data
            if Results:

                # Compute MOV timestamp
                Entry = [ Results[ 0 ][ 2 ], Results[ 0 ][ 3 ], Results[ 0 ][ 4 ] ]

                # Insert in state list if not present
                if not Entry in PROCESSED_LIST:

                    # Append element to state list
                    PROCESSED_LIST.append( Entry )

                    # Write state file results
                    with open(StateFile, "ab") as f:
                        f.write(STATE_DATA.pack(*Entry))

                # Merge results
                with open(OutputFile, "ab") as f:
                    for i in Results:
                        f.write(MAIN_DATA.pack(*i))

            else:

                # Debug output
                ShowMessage("Corrupted MOV file with no images %s" % Ret[ 2 ].path, 1)

            # Increment processed MOVs index
            QUEUE_Done  += 1

        # Wait 200ms
        time.sleep(Threads_Sleep_Delay)

# Main thread
# pylint: disable=W0602
def WorkerThread(__Jobs__, __MOV_List__, EXIFTrashFolder, IntegrityTrashFolder, __Total_Files__, __Output_File, _StateFile):

    # Global variables
    global QUEUE_Done, QUEUE_Slots

    # Local variables
    __Processed_Files__ = 1
    Threads = Queue.Queue()
    Threads_Results = []

    # Initialize default threads results containers
    for _ in range(0, __Jobs__):
        Threads_Results.append([[], 0])
        QUEUE_Slots.append(0)

    # Create collector thread
    CollectorThread = threading.Thread(
        target = WorkerThread_indexCollector,
        args = (Threads, __Output_File, _StateFile)
    )

    # Start collector thread_StateFile
    CollectorThread.setDaemon(True)
    CollectorThread.start()

    # Loop until all MOVS are extracted
    while QUEUE_Done < __Total_Files__:

        # Insert a new item to the queue if not full
        if (UsedSlots(QUEUE_Slots) < __Jobs__) and (len(__MOV_List__) > 0):

            # Get an available thread slot
            Index = GetSlot(QUEUE_Slots)

            # Pick one MOV file
            MOV = __MOV_List__[0]

            # Debug output
            ShowMessage("Processing (%d/%d): %s..." % (__Processed_Files__, __Total_Files__, MOV.path), 0, 0, 1)

            # Issue 7980 fix
            datetime.strptime('', '')

            # Assign thread id
            Threads_Results[Index][1] = Index

            # Lock thread slot
            QUEUE_Slots[Index] = 1

            # Create thread
            ThreadJob = threading.Thread(
                target = indexMOV_Thread,
                args = (Threads, MOV, EXIFTrashFolder, IntegrityTrashFolder, Index)
            )

            # Start thread
            ThreadJob.setDaemon(True)
            ThreadJob.start()

            # Increment index
            __Processed_Files__ += 1

            # Remove processed MOV file from list
            __MOV_List__.pop(0)

        else:

            # Wait 200ms
            time.sleep(Threads_Sleep_Delay)

    # Exit threads
    QUEUE_Done = -1

# Usage display function
def _usage():
    print """
    Usage: %s [OPTIONS]

    [Required arguments]
    --mount-point        Base mount directory
    --mac-address        Camera MAC address
    --master-timestamp   Master timestamp

    [Optional arguments]
    --disk-threads      Process localy with specified number of threads
    --auto-segmented    Auto segmentation executed (master script)
    --help              Show this message

    """ % sys.argv[0]

# Program entry point function
# pylint: disable=W0142
def main(argv):

    # Parse arguments
    Arguments = {}
    Argv_Concat = ' '.join(argv)
    Argv_Flags = Argv_Concat.split('--')

    # Iterate over source args
    for i in Argv_Flags:

        # Check length
        if len(i) > 0:

            # Split by first space
            splited = i.split(' ', 1)

            # Check if argument contains value
            if len(splited) > 1:
                Arguments[splited[0]] = (None if not splited[1] else splited[1].strip())
            else:
                Arguments[splited[0]] =  None

    # Arguments variables
    __MountPoint__      = (None if not 'mount-point' in Arguments else Arguments['mount-point'].rstrip('/'))
    __CameraMAC__       = (None if not 'mac-address' in Arguments else Arguments['mac-address'])
    __MasterTimestamp__ = (None if not 'master-timestamp' in Arguments else Arguments['master-timestamp'])
    __DiskThreads__     = (None if not 'disk-threads' in Arguments else Arguments['disk-threads'])
    __AutoSegmented__   = (1 if 'auto-segmented' in Arguments else 0)
    __Help__            = (1 if 'help' in Arguments else 0)

    # Arguments check
    if (not __MountPoint__ or not __CameraMAC__ or not __MasterTimestamp__) or __Help__:
        _usage()
        sys.exit(0)

    # Check if auto-segmented argument is given
    if not __AutoSegmented__:
        ShowMessage('No --auto-segmented argument given, exiting...', 1)
        return

    # Compute paths
    InputFolder          = "%s/rawdata/%s/master/%s/mov" % (__MountPoint__, __CameraMAC__, __MasterTimestamp__)
    OutputFolder         = "%s/rawdata/%s/master/%s/info/raw" % (__MountPoint__, __CameraMAC__, __MasterTimestamp__)
    OutputFile           = "%s/jp4table.bin" % (OutputFolder)
    StateFile            = "%s/jp4table_state.bin" % (OutputFolder)
    EXIFTrashFolder      = "%s/rawdata/%s/master/%s/info/raw/corrupted/exif" % (__MountPoint__, __CameraMAC__, __MasterTimestamp__)
    IntegrityTrashFolder = "%s/rawdata/%s/master/%s/info/raw/corrupted/integrity" % (__MountPoint__, __CameraMAC__, __MasterTimestamp__)
    FastCalKeyFile       = "%s/camera/%s/fastcal/calibration.key" % (__MountPoint__, __CameraMAC__)
    ParallelConfigFile   = "%s/system/etc/ssh-configs/rawdata-procedures/rawdata-jp4table.conf" % (__MountPoint__)

    # Get local jobs count from config file
    __Jobs__ = GetCores( ParallelConfigFile )

    # Override disk threads is specified
    if __DiskThreads__:
        __Jobs__ = int( __DiskThreads__ )

    # Get camera modules count
    ModuleCount = GetCameraModules(FastCalKeyFile)

    # Verifiy presence of input folder
    if not os.path.isdir(InputFolder):
        ShowMessage("Input folder '%s' does not exist" % InputFolder, 2, 1)

    # Create output dir if not exists
    if not os.path.isdir(OutputFolder):
        os.makedirs(OutputFolder)

    # Verifiy presence of prefs.xml
    if not os.path.isfile(FastCalKeyFile):
        ShowMessage("FastCal key file '%s' does not exist" % FastCalKeyFile, 2, 1)

    # Debug output
    ShowMessage("Input MOV path: %s" % InputFolder)
    ShowMessage("Output table file: %s" % OutputFile)
    ShowMessage("Output state file: %s" % StateFile)

    # Check if file exists
    if os.path.isfile( StateFile ):

        # Read state file
        with open(StateFile, "rb") as bin_file:
            BINARY_DATA = bin_file.read()

            # Determine data length
            Len = len(BINARY_DATA)

            # Determine entries count
            Count = Len / STATE_SIZE

            # Initialize variables
            Offset = STATE_SIZE

            # Iterate over entries count
            for i in range(0, Count):

                # Unpack binary values
                Unpacked = STATE_DATA.unpack( BINARY_DATA[STATE_SIZE * i : Offset] )

                # Append value to list
                PROCESSED_LIST.append( [Unpacked[ 0 ], Unpacked[ 1 ], Unpacked[ 2 ]] )

                # Increment offset
                Offset += STATE_SIZE

    # List camera modules
    CameraModules = [i for i in range(1, ModuleCount + 1)]

    # Insert all MOV files into list
    __MOV_List__  = []

    # Iterate over camera modules
    for mn in CameraModules:

        # Iterate over MOV files
        for MOV in sorted(glob.glob("%s/%s/*.mov" % (InputFolder, mn))):

            # Create MOV file element
            _MOV = MovFile(MOV, mn)

            # Build state entry element
            _Entry = [_MOV.timestamp, _MOV.microtimestamp, _MOV.module]

            # Check if MOV is already indexed
            if not _Entry in PROCESSED_LIST:

                # Append MOV to list
                __MOV_List__.append( MovFile(MOV, mn) )

    # Check if MOV list is not empty
    if len( __MOV_List__ ) > 0:

        #Create main thread
        MainThread = threading.Thread(
            target = WorkerThread,
            args = (__Jobs__, __MOV_List__, EXIFTrashFolder, IntegrityTrashFolder, len(__MOV_List__), OutputFile, StateFile)
        )

        # Start main thread
        MainThread.setDaemon(True)
        MainThread.start()

        # Wait until main thread finishes
        while MainThread.is_alive():
            time.sleep(0.5)

        # Debug output
        ShowMessage("Sorting table...")

        # Sort table
        sortTable( OutputFile )

    else:

        # Debug output
        ShowMessage("All MOV files are already indexed")

    # Debug output
    ShowMessage("Done")

# Program entry point
if __name__ == "__main__":
    main(sys.argv[1:])
