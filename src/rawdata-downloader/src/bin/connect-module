#!/bin/bash
#
# connect-module - connect requested eyesis module
#
# Copyright (c) 2015 FOXEL SA - http://foxel.ch
# Please read <http://foxel.ch/license> for more information.
#
#
# Author(s):
#
#       Luc Deschenaux <l.deschenaux@foxel.ch>
#
#
# Contributor(s):
#
#       Kevin Velickovic <k.velickovic@foxel.ch>
#
#
# This file is part of the FOXEL project <http://foxel.ch>.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
# Additional Terms:
#
#       You are required to preserve legal notices and author attributions in
#       that material or in the Appropriate Legal Notices displayed by works
#       containing it.
#
#       You are required to attribute the work as explained in the "Usage and
#       Attribution" section of <http://foxel.ch/license>.

#set -e

MYPID=$BASHPID

. $(dirname $0)/rawdata-toolbox.sh

# parse command line options and set environment variables
init() {

  assert_root
  no_concurrency sleep

  # set default values
  MOUNTPOINT=/data
  BASE_IP=192.168.0
  MASTER_IP=221
  MUXES=(192.168.0.224 192.168.0.228)
  SPOOL=/var/spool/rawdata-downloader
  MODULES_COUNT=9

  # load rawdata-downloader preferences
  [ -f /etc/defaults/rawdata-downloader ] && . /etc/defaults/rawdata-downloader

  # parse command line
  if ! options=$(getopt -o hvm:I:i:nd -l help,verbose,mountpoint:,baseip:,masterip,no-checklist,debug: -- "$@")
  then
      # something went wrong, getopt will put out an error message for us
      exit 1
  fi

  eval set -- "$options"

  while [ $# -gt 0 ] ; do
      case $1 in
      -h|--help) usage 1 ;;
      -v|--verbose) VERBOSE=-v ;;
      -m|--mountpoint) MOUNTPOINT=$2 ; shift ;;
      -I|--baseip) BASE_IP=$2 ; shift ;;
      -i|--masterip) MASTER_IP=$2 ; shift ;;
      -n|--no-checklist) NO_CHECKLIST=true ;;
      -d|--debug) DEBUG=1 ;;
      (--) shift; break;;
      (-*) echo "$(basename $0): error - unrecognized option $1" 1>&2; exit 1;;
      (*) break;;
      esac
      shift
  done

  # get camera MAC address
  if [ -z "$MACADDR" ] ; then

    # get camera master ip mac address
    if ! ping -w 5 -c 1 $BASE_IP.$MASTER_IP > /dev/null ; then
      log ${LINENO} error: unable to ping $BASE_IP.$MASTER_IP
      exit 1
    fi

    MACADDR=$(macaddr $BASE_IP.$MASTER_IP | tr 'a-f' 'A-F')

    if [ -z "$MACADDR" ] ; then
      log ${LINENO} error: "unable to get MAC address for $BASE_IP.$MASTER_IP"
      exit 1
    fi

  fi

  # check modules file exist
  MODULES_FILE=$MOUNTPOINT/camera/$MACADDR/rawdata-downloader/modules
  if [ ! -f $MODULES_FILE ] ; then
    log ${LINENO} error: file not found: $MODULES_FILE
    log ${LINENO} error: "specify the proper mount point with -m or run 'build-modules-file $MOUNTPOINT' first"
    exit 1
  fi

  # remaining parameter is the requested module number
  [ -z "$MODULE" ] && MODULE=$1 && shift

  # ... or die
  if [ -z "$MODULE" ] ; then
    usage 1
  fi

  # ... or die
  [ $# -gt 0 ] && usage 1

  
  mkdir -p $SPOOL || exit 1

  # debug flags
  if [ -n "$DEBUG" ] ; then 
    set -x
    set -v
    PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
  fi

}

checkdependencies() {
  assertcommands inotifywait arp wget ssh sshall /usr/sbin/scsi-disk-udev-eventhandler
  if [ ! -f /etc/udev/rules.d/90-rawdata-downloader.rules ] ; then
    echo file not found: /etc/udev/rules.d/90-rawdata-downloader.rules >&2
    exit 1
  fi
}

usage() {
  cat >&2 << EOF

SYNOPSIS:

  $(basename $0) [OPTION ...] <camera_module_index>

DESCRIPTION: 
  
  Request the Eysesis4PI esata multiplexer to activate the SSD related to
  the specified camera module index, and return the device path.

OPTIONS SUMMARY:

  -h|--help                   display this
  -v|--verbose                verbose output
  -d|--debug                  enable debugging mode
  -m|--mountpoint <path>      parent location of the 'camera' directory
  -I|--baseip <base_ip>       base ip, defaults to 192.168.0
  -i|--masterip <master_ip>   master camera ip, defaults to 221
  -n|--nochecklist            dont check camera uptime first
  <camera_module_index>       the camera module index wanted

EOF
  exit $1
}

get_local_disk_serials() {
  for DEV in $(ls /dev/sd* | egrep -v '[0-9]$') ; do
    echo $DEV,$(hdparm -i $DEV | sed -r -n -e 's/.*SerialNo=([^ ]+).*/\1/p')
  done
}

# get module info (mux index serial) from module number
get_module_info() {
  local MODULE_NUMBER=$1
  grep -E -e "^$MODULE_NUMBER " $MODULES_FILE 
}

# compare specified module details with saved one
check_module_address() {
  local MUX_INDEX=$1
  local REMOTE_SSD_INDEX=$2
  local SERIAL=$3
  # return error if serial is not matching saved one for mux/ssd pair
  grep -q -E -e " $MUX_INDEX $REMOTE_SSD_INDEX $SERIAL\$" $MODULES_FILE
}

# wait udev generated file in spool folder for requested module device  before exiting
wait_and_exit() {

  log ${LINENO} info: "waiting for udev generated file in $SPOOL"

  # use FIFO instead of PIPE, to exit loop smoothly and avoid messing with environment variables
  local FIFO=$(mktemp -u).$$
  mkfifo $FIFO
  inotifywait -m -e close_write $SPOOL 2>/dev/null > $FIFO &
  local INOTIFY_PID=$!
 
  while read l ; do
    log ${LINENO} debug: $SPOOL INOTIFY $l

    # second string returned by inotifywait is filename (disk serial)
    event=($l)
    SERIAL=${event[2]}

    # get spool filename
    UDEVINFO=$SPOOL/${event[2]}

    # get scsi host from spool filename
    SCSIHOST=$(get_hbtl $UDEVINFO)
    [ -z "$SCSIHOST" ] && killtree -KILL $MYPID

    # get saved connecting disk info
    DISK_CONNECTING_INFO=($(cat $DISK_CONNECTING_TMP))
    _MUX_INDEX=${DISK_CONNECTING_INFO[0]}
    _REMOTE_SSD_INDEX=${DISK_CONNECTING_INFO[1]}
    ISRETRY=${DISK_CONNECTING_INFO[2]}
    DEVICE=$(grep DEVNAME "$UDEVINFO" | cut -f 2 -d '=')

    log ${LINENO} info: device_connected $_MUX_INDEX $_REMOTE_SSD_INDEX $SCSIHOST $SERIAL $DEVICE

    log ${LINENO} info: unpause connect queue         
    touch $TMP/${MUX_INDEX}_${REMOTE_SSD_INDEX}_connecting || killtree -KILL $MYPID                                   

    [ "$_MUX_INDEX" != "$MUX_INDEX" ] && continue
    [ "$_REMOTE_SSD_INDEX" != "$REMOTE_SSD_INDEX" ] && continue

    # assert previously saved module address match the connecting disk
    if ! check_module_address $_MUX_INDEX $_REMOTE_SSD_INDEX $SERIAL 2>&1 | logstdout ${LINENO} ; then
      log ${LINENO} error: invalid_address "saved serial for mux $MUX_INDEX ssd $REMOTE_SSD_INDEX is not matching  $SERIAL"

    else
      # success
      echo $DEVICE
      echo 0 > $EXIT_CODE_TMP

    fi

    # kill inotify so that break can exit loop
    kill $INOTIFY_PID > /dev/null 2>&1
    wait $INOTIFY_PID > /dev/null 2>&1

    break

  done < $FIFO

  killtree -KILL $MYPID
}

wait_watches_established() {

  local INOTIFY_STDERR=$1
  local msg

  local FIFO=$(mktemp -u).$$
  mkfifo $FIFO
  tail -f $INOTIFY_STDERR > $FIFO 2>&1 &
  local TAIL_PID=$!

  while read msg ; do
    echo $msg | logstdout ${LINENO}
    [[ "$msg" =~ "Watches established" ]] && break
  done < $FIFO

  kill $TAIL_PID > /dev/null 2>&1
  wait $TAIL_PID > /dev/null 2>&1

  rm $INOTIFY_STDERR $FIFO
}

# request esata connection for MUX_INDEX / REMOTE_SSD_INDEX
request_ssd() {

    MUX_INDEX=$MUX_INDEX
    REMOTE_SSD_INDEX=$REMOTE_SSD_INDEX
    ISRETRY=

    log ${LINENO} info: going to request mux $MUX_INDEX ssd $REMOTE_SSD_INDEX

    while true ; do

      # before requesting disk connection, setup inotifywait and timemout to pause queue until disk is connected or timeout occurs
      touch $TMP/${MUX_INDEX}_${REMOTE_SSD_INDEX}_connecting || killtree -KILL $MYPID

      INOTIFY_STDERR=$(mktemp)
      timeout -k 10 30 inotifywait -e close_write $TMP/${MUX_INDEX}_${REMOTE_SSD_INDEX}_connecting > /dev/null 2> $INOTIFY_STDERR &
      TIMEOUTPID=$!
      wait_watches_established $INOTIFY_STDERR 2>&1 | grep -v -e INOTIFY_STDERR | logstdout ${LINENO}

      # before requesting disk connection, save connecting disk info
      echo $MUX_INDEX $REMOTE_SSD_INDEX $ISRETRY > $DISK_CONNECTING_TMP

      # request disk connection
      log ${LINENO} info: requesting sata disk mux $MUX_INDEX index $REMOTE_SSD_INDEX
      log ${LINENO} info: wget http://${MUXES[$MUX_INDEX]}/103697.php?c:host4=ssd$REMOTE_SSD_INDEX
      wget -q http://${MUXES[$MUX_INDEX]}/103697.php?c:host4=ssd$REMOTE_SSD_INDEX -O - > /dev/null || killtree -KILL $MYPID

      # wait for inotifywait and timeout setup above
      log ${LINENO} info: waiting for mux $MUX_INDEX disk $REMOTE_SSD_INDEX
      wait $TIMEOUTPID 2> /dev/null
      timeout_status=$?

      log ${LINENO} debug: timeout "status $timeout_status wating for mux $MUX_INDEX disk $REMOTE_SSD_INDEX"

      rm $TMP/${MUX_INDEX}_${REMOTE_SSD_INDEX}_connecting

      # exit loop if there was no timeout
      [ "$timeout_status" != "124" ] && break

      # timeout on retry ? exit
      if [ -n "$ISRETRY" ] ; then
        log ${LINENO} error: "connection retry failed for mux $MUX_INDEX disk $REMOTE_SSD_INDEX"
        killtree -KILL $MYPID
      fi

      ISRETRY=yes

    done

} # run

########### main script

init "$@"

SCSIHOST=()

checkdependencies

TMP=/tmp/mount_module/$MACADDR/$$
mkdir -p $TMP

# create shared variables and inter-process storage
MYPID=$BASHPID
EXIT_CODE_TMP=$(mktemp --tmpdir=$TMP)
DISK_CONNECTING_TMP=$(mktemp --tmpdir=$TMP)
SSD_SERIAL_TMP=$TMP/../serials

echo 1 > $EXIT_CODE_TMP

trap "killtree -9 $MYPID yes" SIGINT SIGKILL SIGTERM SIGHUP

SCSIHOST_TMP=$TMP/../scsihosts

if [ -z "$NO_CHECKLIST" ] ; then

  log ${LINENO} info: get camera uptime
  CAMERA_UPTIME=$(get_camera_uptime)
  if [ -z "$CAMERA_UPTIME" ] ; then
    log ${LINENO} error: cannot get camera uptime
    exit 1
  fi

  if [ $CAMERA_UPTIME -lt 180 ] ; then
    log ${LINENO} info: wait $((180-CAMERA_UPTIME)) seconds for camera wake up
    sleep $((180-CAMERA_UPTIME))
  fi

  log ${LINENO} info: check camera ssh access
  assert_remote_ssh_servers_functional

fi

touch $SCSIHOST_TMP

MODULE_INFO=($(get_module_info $MODULE))
SERIAL=${MODULE_INFO[3]}

# return device path if already connected
for pair in $(get_local_disk_serials) ; do 

  pair=($(echo $pair | tr ',' ' '))

  # is requested module ssd is already connected ?
  if [ "$SERIAL" == "${pair[1]}" ] ; then
    # then print device and exit
    echo "${pair[0]}"
    exit 0
  fi
    
done

# read serials from cache
[ -s "$SSD_SERIAL_TMP" ] && . $SSD_SERIAL_TMP

# if serial is not known yet
if [ -z "${SSD_SERIAL[$((MODULE-1))]}" ] ; then

  # configure sshall login "list" for requested module
  export SSHALL_HOSTS="root@$BASE_IP.$((MASTER_IP + MODULE - 1))"

  # get camera ssd serial
  log ${LINENO} info: get ssd serial
  SSD_SERIAL=()
  export SSD_SERIAL_TMP
  export MASTER_IP
  export MYPID
  touch $SSD_SERIAL_TMP || exit 1

  get_remote_disk_serial /dev/hda 2>&1 | while read l ; do
    msg=($l)
    if [ ${msg[0]} != "sshall:" ] ; then
      log ${LINENO} info: get_remote_disk_serial: $l
      continue
    fi
    [ ${msg[2]} = "stderr" ] && log ${LINENO} error: get_remote_disk_serial: $l
    LOGIN=${msg[1]}
    [ -z "$LOGIN" ] && log ${LINENO} error: get_remote_disk_serial: $l && killtree -KILL $MYPID
    IP=$(echo $LOGIN | sed -r -n -e 's/.*@[0-9]+\.[0-9]+\.[0-9]+\.([0-9]+).*/\1/p')
    INDEX=$(expr $IP - $MASTER_IP)
    WHAT=${msg[2]}
    case "$WHAT" in
    status)
      STATUS=${msg[3]}
      if [ "$STATUS" != "0" ] ; then
        log ${LINENO} error: "$l"
        log ${LINENO} error: "hdparm failed on camera $IP with exit code $STATUS"
        killtree -KILL $MYPID yes
      fi
      ;;
    stdout)
      # save serial cache for parent process
      SERIAL=${msg[3]}
      echo SSD_SERIAL[$INDEX]=$SERIAL >> $SSD_SERIAL_TMP
      ;;
    esac
  done

fi

# load serials cache
. $SSD_SERIAL_TMP

# assert serial returned by the camera match the one in MODULES_FILE
if [ "${SSD_SERIAL[$((MODULE-1))]}" != "$SERIAL" ] ; then
  log ${LINENO} error: ssd serial mismatch "(${SSD_SERIAL[$((MODULE-1))]}" '!=' "$SERIAL)"
  exit 1
fi

# unmount camera ssd
log ${LINENO} info: umount CF
umount_all 2>&1 | logstdout ${LINENO}

# module address
MUX_INDEX=${MODULE_INFO[1]}
REMOTE_SSD_INDEX=${MODULE_INFO[2]}

# run backgroud task waiting for disk
wait_and_exit &

log ${LINENO} info: starting processing

# request disk
request_ssd &

# wait background jobs termination
wait 2> /dev/null

# disable ctrl-c
trap '' SIGINT

EXIT_CODE=$(cat $EXIT_CODE_TMP)

# remove temporary files
rm $TMP/$$ -r 2> /dev/null

# kill zombies
killtree -KILL $MYPID

log ${LINENO} info: exit $EXIT_CODE
exit $EXIT_CODE
