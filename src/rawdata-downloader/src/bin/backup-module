#!/bin/bash
#
# backup-module - backup eyesis module ssd 
# This script is intended to be used as the <script> parameter for process-modules
#
# Copyright (c) 2013-2015 FOXEL SA - http://foxel.ch
# Please read <http://foxel.ch/license> for more information.
#
#
# Author(s):
#
#       Luc Deschenaux <l.deschenaux@foxel.ch>
#
#
# This file is part of the FOXEL project <http://foxel.ch>.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
# Additional Terms:
#
#       You are required to preserve legal notices and author attributions in
#       that material or in the Appropriate Legal Notices displayed by works
#       containing it.
#
#       You are required to attribute the work as explained in the "Usage and
#       Attribution" section of <http://foxel.ch/license>.

PARTNUM=1
PARTITION=${DEVICE}$PARTNUM
MODULE_INDEX=$MODULE
FSTYPE=ext2

# create mountpoint directory
PARTITION_MOUNTPOINT=/mnt/$(basename $PARTITION)
mkdir -p $PARTITION_MOUNTPOINT 2>&1 | logstdout ${LINENO}
[ ${PIPESTATUS[0]} -ne 0 ] && return 1

# disable NCQ
if [ -n "$DISABLE_NCQ" ] ; then
  log ${LINENO} info: disabling NCQ $SERIAL ${DEVICE}$PARTNUM
  echo 1 > /sys/block/$(basename $DEVICE)/device/queue_depth
fi

# if process is exiting, just wait for kill
[ -n "$QUITTING_TMP" ] &&  while [ "$(cat $QUITTING_TMP)" -eq 1 ] ; do sleep 100000 ; done

log ${LINENO} info: checking module $MODULE disk integrity

# check / repair filesystem (-p is safe)
fsck -p $PARTITION | logstdout ${LINENO}
if [ ${PIPESTATUS[0]} -gt 1 ] ; then
  log ${LINENO} error: "fsck failed for module $MODULE_INDEX"
  return 1
fi

# if fsck -p fails, we could make a disk image and fsck -y the disk image,
# then mount it 
#
# fsck exit code is the sum of the following conditions
#            0    - No errors
#            1    - Filesystem errors corrected
#            2    - System should be rebooted
#            4    - Filesystem errors left uncorrected
#            8    - Operational error
#            16   - Usage or syntax error
#            32   - Fsck canceled by user request
#            128  - Shared-library error

# mount device read-only
log ${LINENO} info: mount disk of module $MODULE_INDEX on $PARTITION_MOUNTPOINT
mount -t $FSTYPE -o ro $PARTITION $PARTITION_MOUNTPOINT 2>&1 | logstdout ${LINENO}
if [ ${PIPESTATUS[0]} -ne 0 ] ; then
   log ${LINENO} error: "mount disk failed for module $MODULE_INDEX"
   return 1
fi

# set destination folder
if [ -z "$MASTER_TS" ] ; then
  log ${LINENO} error: master timestamp undefined
  return 1
fi

DESTINATION=$MOUNTPOINT/rawdata/$MACADDR/master
RSYNCDEST=$DESTINATION/$MASTER_TS/mov/$MODULE_INDEX

# create destination folder
mkdir -p "$RSYNCDEST" 2>&1 | logstdout ${LINENO}
if [ ${PIPESTATUS[0]} -ne 0 ] ; then
  return 1
fi

case "$PROCESSMODULES_PARENT_SCRIPT" in

  rawdata-downloader)
    log ${LINENO} info: backup disk of module $MODULE_INDEX

    rsync \
      --exclude='lost+found' \
      --exclude='**nodownload*' \
      --archive \
      --inplace \
      --verbose \
      $PARTITION_MOUNTPOINT/ $RSYNCDEST 2>&1 | logstdout ${LINENO} "$RSYNCDEST : "

      EXIT_CODE=${PIPESTATUS[0]}

    ;;

  rawdata-compare)
    log ${LINENO} info: "comparing content of module $MODULE_INDEX with corresponding files in $RSYNCDEST"
    RSYNC_OUT=$(mktemp /tmp/rsync_XXXXXXX.tmp)

    rsync \
      --exclude='lost+found' \
      --exclude='**nodownload*' \
      --archive \
      --dry-run \
      --checksum \
      --itemize-changes \
      $PARTITION_MOUNTPOINT/ $RSYNCDEST 2>&1 | tee $RSYNC_OUT | logstdout ${LINENO}

      EXIT_CODE=${PIPESTATUS[0]}

      if [ $EXIT_CODE -eq 0 ] ; then

        # if rsync output is not null, a new source file is present or a target file is not identical
        if [ -s $RSYNC_OUT ] ; then
          log ${LINENO} error: "content of module $MODULE_INDEX differs from corresponding files in $RSYNCDEST"
          cat $RSYNC_OUT | logstdout ${LINENO}
          EXIT_CODE=1
        fi

      fi

      rm $RSYNC_OUT

    ;;

  *)
    # unexpected error
    log ${LINENO} "error: unexpected parent script: \"$PROCESSMODULES_PARENT_SCRIPT\""
    EXIT_CODE=1
    ;;

esac


# unmount device
log ${LINENO} info: unmounting $PARTITION_MOUNTPOINT
umount $PARTITION_MOUNTPOINT 2>&1 | logstdout ${LINENO}
if [ ${PIPESTATUS[0]} -ne 0 ] ; then
   log ${LINENO} warning: unmounting $PARTITION_MOUNTPOINT failed
fi

echo $DESTINATION/$MASTER_TS

return $EXIT_CODE
