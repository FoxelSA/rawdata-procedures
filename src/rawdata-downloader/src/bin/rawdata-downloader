#!/bin/bash
#
# rawdata-procedures - Camera raw data procedures
#
# Copyright (c) 2013-2015 FOXEL SA - http://foxel.ch
# Please read <http://foxel.ch/license> for more information.
#
#
# Author(s):
#
#       Luc Deschenaux <l.deschenaux@foxel.ch>
#
#
# Contributor(s):
#
#       Kevin Velickovic <k.velickovic@foxel.ch>
#
#
# This file is part of the FOXEL project <http://foxel.ch>.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
# Additional Terms:
#
#       You are required to preserve legal notices and author attributions in
#       that material or in the Appropriate Legal Notices displayed by works
#       containing it.
#
#       You are required to attribute the work as explained in the "Usage and
#       Attribution" section of <http://foxel.ch/license>.

_UID=$UID
_GID=1000

SCRIPT=$(basename $0)

LOGDIR=/var/log/rawdata-downloader
mkdir -p $LOGDIR || exit

log() {
  echo $(date +%F_%R:%S) $SCRIPT $BASHPID $@ >&2
}

# format stdin for logginG
logstdout() {
  while read l ; do
    echo $(date +%F_%R:%S) $SCRIPT $BASHPID $@ $l >&2
  done
}

kill_old_job() {

  local JOBNAME="$1"
  local PIDFILE="$2"

  # read PIDFILE
  [ -s "$PIDFILE" ] && local OLDPID=$(cat $PIDFILE)

  # kill running process with this id if job name matches $JOBNAME
  if [ -n "$OLDPID" ] && [ -f /proc/$OLDPID/status ] && [ "$(grep Name /proc/$OLDPID/status 2>/dev/null | cut -f 2)" == "$JOBNAME" ] ; then
    echo "killing old $JOBNAME process with PID $OLDPID"
    kill $OLDPID
  fi

}

export MOUNTPOINT=$1

[ -z "$MOUNTPOINT" ] && exit 1

# get the master timestamp from module 1
export MASTER_TS=$(process-modules --verbose --mountpoint $MOUNTPOINT get-module-master_timestamp 1)

# ... or die
STATUS=$?
if [ -z "$MASTER_TS" -o $STATUS -ne 0 ] ; then
  log ${LINENO} error: "could not get the master timestamp"
  exit 1
fi

# after getting master timestamp from module 1, no need to check camera uptime anymore
export NOCHECKLIST=--no-checklist

# create log file
LOG_DATE=$(date +%F%R%S | sed -r -e 's/[-\:]//g')
RAWDATA_DOWNLOADER_LOG=$LOGDIR/rawdata-downloader_${LOG_DATE}.log
touch $RAWDATA_DOWNLOADER_LOG || exit

# display rawdata-downloader log file on console
tail -f $RAWDATA_DOWNLOADER_LOG >&2 &
LOGTAIL_PID=$!

# get rid of "terminated" message on kill
disown $LOGTAIL_PID

# kill old tail process used to display log on console, if any
LOGTAIL_PIDFILE=/var/run/rawdata-downloader_logger.pid
kill_old_job tail $LOGTAIL_PIDFILE
echo $LOGTAIL_PID > $LOGTAIL_PIDFILE

# save /var/log/kern.log
KERNEL_LOG=$LOGDIR/rawdata-downloader_${LOG_DATE}.kern.log
touch $KERNEL_LOG || exit
tail -f /var/log/kern.log > $KERNEL_LOG &
LOGTAIL2_PID=$!

# get rid of "terminated" message on kill
disown $LOGTAIL2_PID

# kill old tail process used to copy kern.log, if any
LOGTAIL2_PIDFILE=/var/run/rawdata-downloader_logger.kern.pid
kill_old_job tail $LOGTAIL2_PIDFILE
echo $LOGTAIL2_PID > $LOGTAIL2_PIDFILE

# download rawdata from camera modules
DEST=$(process-modules --all --verbose --mountpoint $MOUNTPOINT backup-module 2> $RAWDATA_DOWNLOADER_LOG)

EXIT_CODE=$?

# stop kernel log backup
kill $LOGTAIL2_PID > /dev/null 2>&1

# stop log display
kill $LOGTAIL_PID > /dev/null 2>&1

# Check exit code
if [ $EXIT_CODE -ne 0 ] ; then
 log ${LINENO} error: rawdata-download exit code $EXIT_CODE
 exit $EXIT_CODE
fi

# set permissions for directories
chown $_UID.$_GID $DEST $DEST/mov
chown -R $_UID.$_GID $DEST/mov
chmod 0777 $DEST/mov
chmod -R 0777 $DEST/mov

# Decompose destination
IFS='/' read -a DEST_DECOMPOSED <<< "$DEST"

# Extract MAC address
MAC_ADDR=${DEST_DECOMPOSED[${#DEST_DECOMPOSED} - 3]}

# return mac address and first timestamp
echo $MAC_ADDR $MASTER_TS
