#!/bin/bash
#
# process-modules - run the specified command for every Eyesis4PI module specified
#
# Copyright (c) 2013-2015 FOXEL SA - http://foxel.ch
# Please read <http://foxel.ch/license> for more information.
#
#
# Author(s):
#
#       Luc Deschenaux <l.deschenaux@foxel.ch>
#
#
# This file is part of the FOXEL project <http://foxel.ch>.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
# Additional Terms:
#
#       You are required to preserve legal notices and author attributions in
#       that material or in the Appropriate Legal Notices displayed by works
#       containing it.
#
#       You are required to attribute the work as explained in the "Usage and
#       Attribution" section of <http://foxel.ch/license>.


. $(dirname $0)/rawdata-toolbox.sh                                                                                    
__PROCESS_ALL_DISKS__=$(basename $0)

export MYPID=$BASHPID

trap "killtree -9 $MYPID yes" SIGINT SIGKILL SIGTERM SIGHUP

# parse command line and set default values
init() {

  # defaults
  MOUNTPOINT=/data
  BASE_IP=192.168.0
  MASTER_IP=221
  VERBOSE=-v

  # load rawdata-downloader preferences
  [ -f /etc/defaults/rawdata-downloader ] && . /etc/defaults/rawdata-downloader

  # parse command line options
  if ! options=$(getopt -o hm:I:i:vdas -l help,mountpoint:,baseip:,masterip:,verbose,debug,all,sequentially -- "$@")
  then
      # something went wrong, getopt will put out an error message for us
      exit 1
  fi

  eval set -- "$options"

  while [ $# -gt 0 ] ; do
      case $1 in
      -h|--help) usage $1 ;;
      -m|--mountpoint) MOUNTPOINT=$2 ; shift ;;
      -v|--verbose) VERBOSE=-v ;;
      -I|--baseip) BASE_IP=$2 ; shift ;;
      -i|--masterip) MASTER_IP=$2 ; shift ;;
      -d|--debug) DEBUG=-d ;;
      -a|--all) ALL=yes ;;
      -s|--sequentially) SEQUENTIALLY=yes ;;
      (--) shift; break;;
      (-*) echo "$(basename $0): error - unrecognized option $1" 1>&2; exit 1;;
      (*) break;;
      esac
      shift
  done

  # enable debug mode if requested
  if [ -n "$DEBUG" ] ; then
    set -x   
    set -v   
    PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
  fi         

  # retrieve camera mac address from arp cache
  MACADDR=$(macaddr $BASE_IP.$MASTER_IP | tr 'a-f' 'A-F')
  if [ -z "$MACADDR" ] ; then
    log ${LINENO} error: "unable to get MAC address for $BASE_IP.$MASTER_IP"
    exit 1
  fi

  MODULES_FILE=$MOUNTPOINT/camera/$MACADDR/rawdata-downloader/modules
  if ! [ -f "$MODULES_FILE" ] ; then
    log ${LINENO} error: "file not found: $MODULES_FILE"
    log ${LINENO} error: "run build-modules-file first or specify the proper mountpoint with -m"
    exit 1
  fi

  TMPDIR=/tmp/$__PROCESS_ALL_DISKS__/$$
  mkdir -p $TMPDIR || exit

  PROCESSED_LIST=$(mktemp --tmpdir=$TMPDIR)
  LOGFILE=/tmp/$__PROCESS_ALL_DISKS__/$$.log

  if [ $# -eq 0 ] ; then
    log ${LINENO} error: "missing parameter: <script>"
    usage 1
  fi
  SCRIPT=$(which $1)
  shift

  if [ ! -f "$SCRIPT" ] ; then
    log ${LINENO} error: "script not found: $SCRIPT"
    exit 1
  fi

  # set modules count from modules file if --all specified,
  if [ -n "$ALL" ] ; then

    if [ $# -gt 0 ] ; then
      log ${LINENO} error: "extra parameters: $@"
      usage 1
    fi

    MODULES_COUNT=$(cat $MODULES_FILE | wc -l)

  else

    # get module list and count from command line

    if [ $# -eq 0 ] ; then
      log ${LINENO} error: "missing parameter: <module_index>"
      usage 1
    fi

    MODULE_LIST=$@
    MODULES_COUNT=$#

  fi

}

usage() {
  cat >&2 << EOF

SYNOPSIS:

  $(basename $0) [OPTION ...] <script> [ -a|--all | <module_index> ...]"

DESCRIPTION: 
  
  Source the specified script for every Eyesis4PI module specified

OPTIONS SUMMARY:

  -h|--help                   display this
  -v|--verbose                verbose output
  -m|--mountpoint <path>      parent location of the 'camera' directory
  -I|--baseip <base_ip>       base ip, defaults to 192.168.0
  -i|--masterip <master_ip>   master camera ip, defaults to 221
  -a|--all                    process all modules
  <script>                    script to be sourced
  <module_index>              camera module index (mutually exclusive with -a)

EOF
  exit $1
}

# source $SCRIPT for each module index specified as parameter
process_module_list() {

  module_list=$@

  for MODULE in $module_list  ; do

    log ${LINENO} info: module $MODULE connecting

    # request module to multiplexer and get device path
    DEVICE=$(connect-module $VERBOSE $NOCHECKLIST $MODULE --mountpoint $MOUNTPOINT 2>> $LOGFILE)
    if [ -z "$DEVICE" ] ; then
      log ${LINENO} error: failed to connect esata multiplexer $(get_mux_index $MODULE) to module $MODULE
      killtree -KILL $MYPID yes
      break
    fi

    log ${LINENO} info: module $MODULE connecting : success
    # dont lose time with camera checklist before requesting next modules
    NOCHECKLIST=--no-checklist

    # if already mounted, try to unmount device
    if mount | grep -q ${DEVICE}1 ; then
      log ${LINENO} info: unmount ${DEVICE}1
      if ! umount ${DEVICE}1 2>/dev/null || umount -f ${DEVICE}1 2>/dev/null ; then
        log ${LINENO} error: "could not unmount ${DEVICE}"
        killtree -KILL $MYPID yes
        break
      fi
    fi

    # run specified script using "source" so that it can access to everything defined here
    log ${LINENO} info: "module $MODULE $SCRIPT"
    if source $SCRIPT ; then
      log ${LINENO} info: "module $MODULE $SCRIPT : success"
      echo "${MODULE}" >> $PROCESSED_LIST
    else
      log ${LINENO} error: "module $MODULE $SCRIPT : failed"
      killtree -KILL $MYPID yes
      break
    fi

  done

}

main() {

  init "$@"

  _muxindex=0

  if [ -n "$ALL" ] ; then

    # process all modules
    while true ; do
      module_list=$(get_modules_list_for_multiplexer $_muxindex)
      [ -z "$module_list" ] && break
      process_module_list $module_list &

      # wait for background processes if processing muxes sequentially
      [ -n "$SEQUENTIALLY" ] && wait

      ((++_muxindex))

    done

  else
    # process specified modules
    process_module_list $MODULE_LIST &

  fi

  # wait for background processes if processing all muxes in parallel
  [ -z "$SEQUENTIALLY" ] && wait

  # display processing status and exit
  #

  PROCESSED_COUNT=$(cat $PROCESSED_LIST | wc -l)
  rm $PROCESSED_LIST

  if [ "$MODULES_COUNT" != "$PROCESSED_COUNT" ] ; then
    log ${LINENO} error: failed: $PROCESSED_COUNT disks processed $PROCESSED_COUNT
    exit 1
  fi

  log ${LINENO} info: success: $PROCESSED_COUNT disks processed
  exit 0

}

main "$@"
