#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
  rawdata-procedures - Camera raw data procedures

  Copyright (c) 2015 FOXEL SA - http://foxel.ch
  Please read <http://foxel.ch/license> for more information.


  Author(s):

       Kevin Velickovic <k.velickovic@foxel.ch>


  This file is part of the FOXEL project <http://foxel.ch>.

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU Affero General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Affero General Public License for more details.

  You should have received a copy of the GNU Affero General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.


  Additional Terms:

       You are required to preserve legal notices and author attributions in
       that material or in the Appropriate Legal Notices displayed by works
       containing it.

       You are required to attribute the work as explained in the "Usage and
       Attribution" section of <http://foxel.ch/license>.
"""

import sys
import re
import os
import subprocess
import getpass
from datetime import datetime

# Function to print debug messages
def ShowMessage(Message, Type=0, Halt=0, SameLine=0):

    NO_COLORS = 0

    # Flush stderr
    sys.stderr.flush()

    # Get current date
    DateNow = datetime.now().strftime("%Y-%m-%d %H:%M")

    # Get script name
    scriptName = "%s :" % os.path.basename(__file__)

    # Return type
    RetChar = '\n'

    if SameLine:
        RetChar = '\r'

    if Type == 0:
        if NO_COLORS:
            sys.stderr.write("\033[K[%s INFO] %s %s%s" % (DateNow, scriptName, Message, RetChar))
        else:
            sys.stderr.write("\033[K[%s \033[32mINFO\033[39m] %s %s%s" % (DateNow, scriptName, Message, RetChar))
    elif Type == 1:
        if NO_COLORS:
            sys.stderr.write("\033[K[%s WARNING] %s %s%s" % (DateNow, scriptName, Message, RetChar))
        else:
            sys.stderr.write("\033[K[%s \033[33mWARNING\033[39m] %s %s%s" % (DateNow, scriptName, Message, RetChar))
    elif Type == 2:
        if NO_COLORS:
            sys.stderr.write("\033[K[%s ERROR] %s %s%s" % (DateNow, scriptName, Message, RetChar))
        else:
            sys.stderr.write("\033[K[%s \033[31mERROR\033[39m] %s %s%s" % (DateNow, scriptName, Message, RetChar))
    elif Type == 3:
        if NO_COLORS:
            sys.stderr.write("\033[K[%s DEBUG] %s %s%s" % (DateNow, scriptName, Message, RetChar))
        else:
            sys.stderr.write("\033[K[%s \033[34mDEBUG\033[39m] %s %s%s" % (DateNow, scriptName, Message, RetChar))

    # Flush stderr
    sys.stderr.flush()

    # Halt program if requested
    if Halt:
        sys.exit()

# Computer container class
class Computer:
    def __init__(self, cpus, username, host):
        self.cpus = cpus
        self.username = username
        self.host = host

def readHosts( path ):

    # Results container
    results = []

    # Open config file
    with open(path, 'r') as configFile:

        # Iterate over file lines
        for line in configFile:

            # Exclude comments
            if not '#' in line[0]:

                # Extract entry
                entry = re.search( r'(\d+)/(.*)\@(.*)', line)

                # Check if line is a valid host
                if entry:

                    # Append result
                    results.append( Computer( entry.group( 1 ), entry.group( 2 ), entry.group( 3 ) ) )

                else:

                    # Extract local entry
                    entry = re.search( r'(\d+)\/\:', line)

                    # Check if line is a valid host
                    if entry:

                        # Append result
                        results.append( Computer( entry.group( 1 ), getpass.getuser(), "localhost" ) )

    # Return results
    return results


# Function to execute a system command
def execCommand(command):

    # Execute command
    return subprocess.call(command, shell=True)

# Function to check presence of an executable in PATH
def which(program):

    # Check if file is executable
    def is_exe(fpath):
        return os.path.isfile(fpath) and os.access(fpath, os.X_OK)

    # Split path
    fpath, _ = os.path.split(program)

    # Check if file exists
    if fpath:

        # Check if file exists
        if is_exe(program):
            return program
    else:

        # Walk over PATHS to check if file exists
        for path in os.environ["PATH"].split(os.pathsep):

            # Remove quotes from path
            path = path.strip('"')

            # Build file name
            exe_file = os.path.join(path, program)

            # Check if file exists
            if is_exe(exe_file):
                return exe_file

    # Return result
    return None

# Usage display function
def _usage():
    print """
    Usage: %s [OPTIONS]

    [Required arguments]
    --mount-point        Base mount directory

    [Optional arguments]
    --help              Show this message

    """ % sys.argv[0]

# Program entry point function
def main(argv):

    # Local programs to check
    Requirements = [
        "csps-elphel-audit",
        "csps-elphel-merge",
        "csps-elphel-sort",
        "csps-elphel-repair",
        "csps-elphel-decompose",
        "csps-process",
        "csps-export",
        "mencoder",
        "parallel"
    ]

    # Parse arguments
    Arguments = {}
    Argv_Concat = ' '.join(argv)
    Argv_Flags = Argv_Concat.split('--')

    # Iterate over source args
    for i in Argv_Flags:

        # Check length
        if len(i) > 0:

            # Split by first space
            splited = i.split(' ', 1)

            # Check if argument contains value
            if len(splited) > 1:
                Arguments[splited[0]] = (None if not splited[1] else splited[1].strip())
            else:
                Arguments[splited[0]] =  None

    # Arguments variables
    __MountPoint__      = (None if not 'mount-point' in Arguments else Arguments['mount-point'].rstrip('/'))
    __Help__            = (1 if 'help' in Arguments else 0)

    # Config files
    __ParallelFile_jp4preview__ = "%s/system/etc/ssh-configs/rawdata-procedures/rawdata-jp4preview.conf" % __MountPoint__
    __ParallelFile_movsplit__   = "%s/system/etc/ssh-configs/rawdata-procedures/rawdata-movsplit.conf" % __MountPoint__

   # Arguments check
    if (not __MountPoint__ ) or __Help__:
        _usage()
        sys.exit(0)

    # Error status container
    Errored = False

    # Debug output
    ShowMessage("Checking local computer...")

    # Iterate over requirements
    for cmd in Requirements:

        # Check command presence
        if not which( cmd ):

            # Debug output
            ShowMessage("%s is not installed on this machine" % cmd, 2)

            # Flag error
            Errored = True

    # Exit 1 if errors
    if Errored: sys.exit( 1 )

    # Read hosts from configs
    Preview_Hosts = readHosts( __ParallelFile_jp4preview__ )
    Split_Hosts   = readHosts( __ParallelFile_movsplit__ )


    # Debug output
    ShowMessage("Checking hosts in rawdata-jp4preview.conf...")

    # Iterate over GnoProj hosts
    for h in Preview_Hosts:

        # Debug output
        ShowMessage("Checking %s@%s..." % (h.username, h.host))

        # Result container
        ret = ""

        # Check if entry is localhostc
        if "localhost" in h.host:

            # Execute check script on remote computer
            ret = execCommand("$(which rawdata-dependencies-checker)")

        else:

            # Execute check script on remote computer
            ret = execCommand("ssh %s@%s 'bash -s' < $(which rawdata-dependencies-checker)" % (h.username, h.host))

        # Check if host have errors
        if ret is not 0:

            # Debug output
            ShowMessage("%s@%s have not all dependencies installed..." % (h.username, h.host), 2)

            # Flag error
            Errored = True

    # Debug output
    ShowMessage("Checking hosts in rawdata-movsplit.conf...")

    # Iterate over GnoProj hosts
    for h in Split_Hosts:

        # Debug output
        ShowMessage("Checking %s@%s..." % (h.username, h.host))

        # Result container
        ret = ""

        # Check if entry is localhostc
        if "localhost" in h.host:

            # Execute check script on remote computer
            ret = execCommand("$(which rawdata-dependencies-checker)")

        else:

            # Execute check script on remote computer
            ret = execCommand("ssh %s@%s 'bash -s' < $(which rawdata-dependencies-checker-split)" % (h.username, h.host))

        # Check if host have errors
        if ret is not 0:

            # Debug output
            ShowMessage("%s@%s have not all dependencies installed..." % (h.username, h.host), 2)

            # Flag error
            Errored = True

    # Exit 1 if errors
    if Errored: sys.exit( 1 )

# Program entry point
if __name__ == "__main__":
    main(sys.argv[1:])
