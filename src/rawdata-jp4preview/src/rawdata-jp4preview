#!/bin/bash
# rawdata-procedures - Camera raw data procedures
#
# Copyright (c) 2013-2015 FOXEL SA - http://foxel.ch
# Please read <http://foxel.ch/license> for more information.
#
#
# Author(s):
#
#       Kevin Velickovic <k.velickovic@foxel.ch>
#
#
# This file is part of the FOXEL project <http://foxel.ch>.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
# Additional Terms:
#
#       You are required to preserve legal notices and author attributions in
#       that material or in the Appropriate Legal Notices displayed by works
#       containing it.
#
#       You are required to attribute the work as explained in the "Usage and
#       Attribution" section of <http://foxel.ch/license>.

# Script parameters #
PARAM_MOUNT="/data/"
PARAM_MAC=""
PARAM_MASTER=""
PARAM_SEGMENT=""
PARAM_CPU_THREADS=""
PARAM_WRITE_TILES="0"
PARAM_FULL_PREVIEWS="0"
PARAM_FORCE="0"

# Loop breaker
LOOP_BREAK="0"

# Help function #
_help() {
    echo """
    Usage: $(basename $0) [OPTIONS]

    [Required arguments]
    --mount-point         Base mount directory
    --mac-address         Camera MAC address
    --master-timestamp    Master timestamp

    [Optional arguments]
    --segment-timestamp   Segment timestamp
    --write-tiles         Write full resolution sensor tiles
    --full-previews       Write full resolution previews
    --force               Bypass preview flag in JSON
    --cpu-threads         Process localy with specified number of threads
    --help                Show this message
    """
}

# Trap ctrl-c and call ctrl_c()
trap ctrl_c INT

# CTRL-C handler function
function ctrl_c() {

    # Set loop break flag
    LOOP_BREAK="1"
}

# Arguments and parameters parser #
arguments() {

    # Search in arguments #
    while [[ $# > 0 ]]; do

        args="$1"
        shift
        case $args in
            --write-tiles)
                PARAM_WRITE_TILES="1"
            ;;
            --full-previews)
                PARAM_FULL_PREVIEWS="1"
            ;;
            --force)
                PARAM_FORCE="1"
            ;;
            --mount-point)
                PARAM_MOUNT="$1"
                shift
            ;;
            --mac-address)
                PARAM_MAC="$1"
                shift
            ;;
            --master-timestamp)
                PARAM_MASTER="$1"
                shift
            ;;
            --segment-timestamp)
                PARAM_SEGMENT="$1"
                shift
            ;;
            --cpu-threads)
                PARAM_CPU_THREADS="$1"
                shift
            ;;
            --help | -h)
                _help
                exit
            ;;
        esac

    done

}

# Display help if needed #
if [ $# -eq 0 ]; then
    _help
    exit
fi

# Argument and parameters #
arguments $@

# Check execution consistency #
if [ -z "$PARAM_MOUNT" ] || [ -z "$PARAM_MAC" ] || [ -z "$PARAM_MASTER" ]; then

    # Exit script #
    echo "Error : cannot continue execution without --mount-point/--mac-address/--master-timestamp parameters"
    exit 1

fi

# Check execution consistency #
if [ ! -d $PARAM_MOUNT/camera ]; then

    # Exit script #
    echo "Error : unable to access standard directory with specified mount point"
    exit 1

fi

# SSH configs cirectory
SSH_CONFIGS_DIR="$PARAM_MOUNT/system/etc/ssh-configs/rawdata-procedures"

# SSH config file
SSH_CONFIG_FILE="$SSH_CONFIGS_DIR/rawdata-jp4preview.conf"

# Segments base folder
SEGMENTS_DIR="$PARAM_MOUNT/rawdata/$PARAM_MAC/master/$PARAM_MASTER/segment"

# Scripts paths
PARALLEL_SCRIPT="parallel"
LIST_SCRIPT="rawdata-jp4preview-list"
PREVIEW_SCRIPT="rawdata-jp4preview-generator"
MOVIE_SCRIPT="rawdata-jp4preview-moviegenerator"
JSONUPDATE_SCRIPT="rawdata-jp4preview-jsonupdater"
STATE_SCRIPT="rawdata-jp4preview-state"
VALIDATE_SCRIPT="rawdata-jp4preview-validate"

# Check if a segment is specified
if [ -z "$PARAM_SEGMENT" ]; then

    # Check if master have segments
    if [ "$(ls -A $SEGMENTS_DIR)" ]; then

        # Iterate over segments
        for d in $SEGMENTS_DIR/* ; do

            # Determine segment folder
            SEGMENT_TIMESTAMP=$(basename $d)
            SEGMENT_FOLDER=$SEGMENTS_DIR/$SEGMENT_TIMESTAMP

            # Check if segment is already splitted
            $STATE_SCRIPT $PARAM_MOUNT \
            $PARAM_MAC \
            $PARAM_MASTER \
            $SEGMENT_TIMESTAMP

            # Check if previews are already generated
            if [ $? -eq 1 ] && [ $PARAM_FORCE -eq 0 ]; then
                >&2 echo "[$(date '+%F %R')] rawdata-jp4preview : Previews already generated for segment $SEGMENT_TIMESTAMP, skipping"
            else

                # Build JP4 list
                JP4_LIST="$(
                    $LIST_SCRIPT \
                    $PARAM_MOUNT \
                    $PARAM_MAC \
                    $PARAM_MASTER \
                    $SEGMENT_TIMESTAMP
                )"

                # Check MOV list length
                if [ ${#JP4_LIST} -gt 0 ]; then

                    # Check if segment have JP4 images
                    if [ -d "$SEGMENT_FOLDER/raw" ]; then

                        # Generate previews for segment
                        >&2 echo "[$(date '+%F %R')] rawdata-jp4preview : Generating previews for segment $SEGMENT_TIMESTAMP..."

                        if [ -z "$PARAM_CPU_THREADS" ]; then
                            echo "$JP4_LIST" | sort | $PARALLEL_SCRIPT --gnu --retries 5 --will-cite --eta --ungroup --sshloginfile $SSH_CONFIG_FILE $PREVIEW_SCRIPT {} \
                            $PARAM_MOUNT \
                            $PARAM_MAC \
                            $PARAM_MASTER \
                            $SEGMENT_TIMESTAMP \
                            $PARAM_WRITE_TILES \
                            $PARAM_FULL_PREVIEWS
                        else
                            echo "$JP4_LIST" | sort | $PARALLEL_SCRIPT --gnu --retries 5 --will-cite --eta -j$PARAM_CPU_THREADS $PREVIEW_SCRIPT {} \
                            $PARAM_MOUNT \
                            $PARAM_MAC \
                            $PARAM_MASTER \
                            $SEGMENT_TIMESTAMP \
                            $PARAM_WRITE_TILES \
                            $PARAM_FULL_PREVIEWS
                        fi

                        # Loop break checker
                        if [ $LOOP_BREAK -ne 0 ]; then break; fi

                        # Generate preview movie
                        >&2 echo "[$(date '+%F %R')] rawdata-jp4preview : Verifying previews..."
                        $VALIDATE_SCRIPT $PARAM_MOUNT \
                        $PARAM_MAC \
                        $PARAM_MASTER \
                        $SEGMENT_TIMESTAMP

                        # Check exit code
                        if [ $? -eq 1 ]; then

                            # Error message
                            >&2 echo -e "[$(date '+%F %R')] rawdata-jp4preview : \e[31m[Error]\e[39m: Some previews are not generated!"

                            # Exit script
                            exit 1

                        else

                            # Debug message
                            >&2 echo "[$(date '+%F %R')] rawdata-jp4preview : Previews OK for segment $SEGMENT_TIMESTAMP"
                        fi

                        # Loop break checker
                        if [ $LOOP_BREAK -ne 0 ]; then break; fi

                        # Generate preview movie
                        >&2 echo "[$(date '+%F %R')] rawdata-jp4preview : Generating preview movie..."
                        $MOVIE_SCRIPT $PARAM_MOUNT \
                        $PARAM_MAC \
                        $PARAM_MASTER \
                        $SEGMENT_TIMESTAMP \
                        $PARAM_FULL_PREVIEWS

                        # Loop break checker
                        if [ $LOOP_BREAK -ne 0 ]; then break; fi

                        # Update JSON file
                        >&2 echo "[$(date '+%F %R')] rawdata-jp4preview : Updating segment JSON file..."
                        $JSONUPDATE_SCRIPT $PARAM_MOUNT \
                        $PARAM_MAC \
                        $PARAM_MASTER \
                        $SEGMENT_TIMESTAMP

                    else

                        # Display warning segment
                        >&2 echo "[$(date '+%F %R')] rawdata-jp4preview : Segment $SEGMENT_TIMESTAMP have no JP4 images, skipping"
                    fi
                else

                    # Display warning
                    >&2 echo "[$(date '+%F %R')] rawdata-jp4preview : Segment $SEGMENT_TIMESTAMP have no JP4 images, skipping"
                fi
            fi
        done
    else

        # Display warning
        >&2 echo "[$(date '+%F %R')] rawdata-jp4preview : Master $PARAM_MASTER have no segments, skipping"
    fi
else

    # Determine segment folder
    SEGMENT_FOLDER=$SEGMENTS_DIR/$PARAM_SEGMENT

    # Check if previews has been already generated for segment
    $STATE_SCRIPT $PARAM_MOUNT \
    $PARAM_MAC \
    $PARAM_MASTER \
    $PARAM_SEGMENT

    if [ $? -eq 1 ] && [ $PARAM_FORCE -eq 0 ]; then
        >&2 echo "[$(date '+%F %R')] rawdata-jp4preview : Previews already generated for segment $PARAM_SEGMENT, skipping"
    else

        # Build JP4 list
        JP4_LIST="$(
            $LIST_SCRIPT \
            $PARAM_MOUNT \
            $PARAM_MAC \
            $PARAM_MASTER \
            $PARAM_SEGMENT
        )"

        # Check MOV list length
        if [ ${#JP4_LIST} -gt 0 ]; then

            # Check if segment have JP4 images
            if [ -d "$SEGMENT_FOLDER/raw" ]; then

                # Generate previews for segment
                >&2 echo "[$(date '+%F %R')] rawdata-jp4preview : Generating previews for segment $PARAM_SEGMENT..."

                if [ -z "$PARAM_CPU_THREADS" ]; then
                    echo "$JP4_LIST" | sort | $PARALLEL_SCRIPT --gnu --retries 5 --will-cite --eta --ungroup --sshloginfile $SSH_CONFIG_FILE $PREVIEW_SCRIPT {} \
                    $PARAM_MOUNT \
                    $PARAM_MAC \
                    $PARAM_MASTER \
                    $PARAM_SEGMENT \
                    $PARAM_WRITE_TILES \
                    $PARAM_FULL_PREVIEWS
                else
                    echo "$JP4_LIST" | sort | $PARALLEL_SCRIPT --gnu --retries 5 --will-cite --eta -j$PARAM_CPU_THREADS $PREVIEW_SCRIPT {} \
                    $PARAM_MOUNT \
                    $PARAM_MAC \
                    $PARAM_MASTER \
                    $PARAM_SEGMENT \
                    $PARAM_WRITE_TILES \
                    $PARAM_FULL_PREVIEWS
                fi

                # Loop break checker
                if [ $LOOP_BREAK -ne 0 ]; then break; fi

                # Generate preview movie
                >&2 echo "[$(date '+%F %R')] rawdata-jp4preview : Verifying previews..."
                $VALIDATE_SCRIPT $PARAM_MOUNT \
                $PARAM_MAC \
                $PARAM_MASTER \
                $PARAM_SEGMENT

                # Check exit code
                if [ $? -eq 1 ]; then

                    # Error message
                    >&2 echo -e "[$(date '+%F %R')] rawdata-jp4preview : \e[31m[Error]\e[39m: Some previews are not generated!"

                    # Exit script
                    exit 1

                else

                    # Debug message
                    >&2 echo "[$(date '+%F %R')] rawdata-jp4preview : Previews OK for segment $SEGMENT_TIMESTAMP"
                fi

                # Loop break checker
                if [ $LOOP_BREAK -ne 0 ]; then break; fi

                # Generate preview movie
                >&2 echo "[$(date '+%F %R')] rawdata-jp4preview : Generating preview movie..."
                $MOVIE_SCRIPT $PARAM_MOUNT \
                $PARAM_MAC \
                $PARAM_MASTER \
                $PARAM_SEGMENT \
                $PARAM_FULL_PREVIEWS

                # Loop break checker
                if [ $LOOP_BREAK -ne 0 ]; then break; fi

                # Update JSON file
                >&2 echo "[$(date '+%F %R')] rawdata-jp4preview : Updating segment JSON file..."
                $JSONUPDATE_SCRIPT $PARAM_MOUNT \
                $PARAM_MAC \
                $PARAM_MASTER \
                $PARAM_SEGMENT

            else

                # Display warning segment
                >&2 echo "[$(date '+%F %R')] rawdata-jp4preview : Segment $PARAM_SEGMENT have no JP4 images, skipping"
            fi
        else

            # Display warning
            >&2 echo "[$(date '+%F %R')] rawdata-jp4preview : Segment $PARAM_SEGMENT have no JP4 images, skipping"
        fi
    fi

fi
