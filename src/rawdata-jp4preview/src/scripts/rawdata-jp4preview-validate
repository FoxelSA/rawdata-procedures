#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
  rawdata-procedures - Camera raw data procedures

  Copyright (c) 2013-2015 FOXEL SA - http://foxel.ch
  Please read <http://foxel.ch/license> for more information.


  Author(s):

       Kevin Velickovic <k.velickovic@foxel.ch>


  This file is part of the FOXEL project <http://foxel.ch>.

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU Affero General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Affero General Public License for more details.

  You should have received a copy of the GNU Affero General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.


  Additional Terms:

       You are required to preserve legal notices and author attributions in
       that material or in the Appropriate Legal Notices displayed by works
       containing it.

       You are required to attribute the work as explained in the "Usage and
       Attribution" section of <http://foxel.ch/license>.
"""

# Imports
import json
import sys
import os

from datetime import datetime

# Usage display function
def _usage():
    print """
    Usage: %s <Mount point> <Camera MAC> <Master timestamp> <Segment timestamp> <no debayer 0 | 1>
    """ % os.path.basename( sys.argv[ 0 ] )

# Function to print debug messages
def ShowMessage(Message, Type=0, Halt=0, NO_COLORS=False):

    # Flush stderr
    sys.stderr.flush()

    # Get current date
    DateNow = datetime.now().strftime("%Y-%m-%d %H:%M")

    # Get script name
    scriptName = "%s :" % os.path.basename(__file__)

    # Display proper message
    if Type == 0:
        if NO_COLORS:
            sys.stderr.write("[%s INFO] %s %s\n" % (DateNow, scriptName, Message))
        else:
            sys.stderr.write("[%s \033[32mINFO\033[39m] %s %s\n" % (DateNow, scriptName, Message))
    elif Type == 1:
        if NO_COLORS:
            sys.stderr.write("[%s WARNING] %s %s\n" % (DateNow, scriptName, Message))
        else:
            sys.stderr.write("[%s \033[33mWARNING\033[39m] %s %s\n" % (DateNow, scriptName, Message))
    elif Type == 2:
        if NO_COLORS:
            sys.stderr.write("[%s ERROR] %s %s\n" % (DateNow, scriptName, Message))
        else:
            sys.stderr.write("[%s \033[31mERROR\033[39m] %s %s\n" % (DateNow, scriptName, Message))
    elif Type == 3:
        if NO_COLORS:
            sys.stderr.write("[%s DEBUG] %s %s\n" % (DateNow, scriptName, Message))
        else:
            sys.stderr.write("[%s \033[34mDEBUG\033[39m] %s %s\n" % (DateNow, scriptName, Message))

    # Flush stderr
    sys.stderr.flush()

    # Halt program if requested
    if Halt:
        sys.exit()

# Program entry point function
def main(argv):

    # Check arguments
    if( len( argv ) < 4 ):
        _usage()
        sys.exit( 0 )

    # Parse arguments
    __Param_Mount__     = argv[ 0 ]
    __Param_MAC__       = argv[ 1 ]
    __Param_Master__    = argv[ 2 ]
    __Param_Segment__   = argv[ 3 ]
    __Param_NoDebayer__ = (int( argv[ 4 ] ) == 1)

    # Compute base path
    __BasePath__ = "%s/rawdata/%s/master/%s" % (__Param_Mount__, __Param_MAC__, __Param_Master__)

    # Compute JSON file path
    __JSONFile__ = "%s/segment/%s/info/segment.json" % (__BasePath__, __Param_Segment__)

    # Open file
    SourceJSON = open(__JSONFile__, 'r')

    # Load JSON file
    json_data = json.load(SourceJSON)

    # Array to store results
    PathList = []

    # Determine base folder
    BaseFolder = 'no-debayer' if __Param_NoDebayer__ else 'debayer'

    # Compute preview folder
    PreviewFolder = "%s/rawdata/%s/master/%s/segment/%s/preview/%s" % (__Param_Mount__,
    __Param_MAC__,
    __Param_Master__,
    __Param_Segment__,
    BaseFolder)

    # Variable to store check status
    State = 0

    # Check if preview folder exists
    if os.path.isdir( PreviewFolder ):

        # Iterate over JSON poses
        for pose in json_data['pose']:

            # Check if pose is valid
            if 'valid' in pose['raw']:

                # Append path to list
                PathList.append( "%s/img/%s/%10d_%06d.jpeg" % (PreviewFolder,
                str(pose['sec'])[:-2],
                pose['sec'],
                pose['usec']))

        # Sort path list
        PathList = sorted( PathList )

        # Display over paths
        for p in PathList:

            # Check if output file exists
            if not os.path.isfile( p ):

                # Warning message
                ShowMessage("Output preview not found: %s" % p, 1)

                # Update state
                State = 1

    else:

        # Warning message
        ShowMessage("Segment %s have no previews" % (__Param_Segment__), 1)

    exit( State )

# Program entry point
if __name__ == "__main__":
    main(sys.argv[1:])
