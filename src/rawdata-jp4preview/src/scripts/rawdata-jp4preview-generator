#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
  rawdata-procedures - Camera raw data procedures

  Copyright (c) 2013-2015 FOXEL SA - http://foxel.ch
  Please read <http://foxel.ch/license> for more information.


  Author(s):

       Kevin Velickovic <k.velickovic@foxel.ch>


  This file is part of the FOXEL project <http://foxel.ch>.

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU Affero General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Affero General Public License for more details.

  You should have received a copy of the GNU Affero General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.


  Additional Terms:

       You are required to preserve legal notices and author attributions in
       that material or in the Appropriate Legal Notices displayed by works
       containing it.

       You are required to attribute the work as explained in the "Usage and
       Attribution" section of <http://foxel.ch/license>.
"""

import ConfigParser
import sys
import os
import subprocess
import glob

from cStringIO import StringIO
from datetime import datetime

# JP4 file container class
class JP4Image:
    def __init__(self, timestamp, module, base_folder=-1):
        self.timestamp = timestamp
        self.module = int(module)
        self.base_folder = int(base_folder)

        # Compute default path
        if self.base_folder != -1:
            self.path = "%s/%s_%s" % (base_folder, timestamp, module)
            self.path_nomod = "%s/%s" % (base_folder, timestamp)
        else:
            self.path = "%s_%s" % (timestamp, module)
            self.path_nomod = "%s_%s" % (timestamp)

# Image correction container class
class imageCorrections:
    def __init__(self):
        self.vflips = []
        self.hflips = []
        self.rolls = []

# Function to execute a system command
def execCommand(command):

    # Execute command
    subprocess.call(command, shell=True)

# Function to check presence of an executable in PATH
def which(program):

    # Check if file is executable
    def is_exe(fpath):
        return os.path.isfile(fpath) and os.access(fpath, os.X_OK)

    # Split path
    fpath, _ = os.path.split(program)

    # Check if file exists
    if fpath:

        # Check if file exists
        if is_exe(program):
            return program
    else:

        # Walk over PATHS to check if file exists
        for path in os.environ["PATH"].split(os.pathsep):

            # Remove quotes from path
            path = path.strip('"')

            # Build file name
            exe_file = os.path.join(path, program)

            # Check if file exists
            if is_exe(exe_file):
                return exe_file

    # Return result
    return None

# Function to print debug messages
# pylint: disable=W0603
def ShowMessage(Message, Type=0, Halt=0, NO_COLORS=False):

    # Flush stdout
    sys.stdout.flush()

    # Get current date
    DateNow = datetime.now().strftime("%Y-%m-%d %H:%M")

    # Get script name
    scriptName = "%s :" % os.path.basename(__file__)

    # Display proper message
    if Type == 0:
        if NO_COLORS:
            sys.stderr.write("[%s INFO] %s %s\n" % (DateNow, scriptName, Message))
        else:
            sys.stderr.write("[%s \033[32mINFO\033[39m] %s %s\n" % (DateNow, scriptName, Message))
    elif Type == 1:
        if NO_COLORS:
            sys.stderr.write("[%s WARNING] %s %s\n" % (DateNow, scriptName, Message))
        else:
            sys.stderr.write("[%s \033[33mWARNING\033[39m] %s %s\n" % (DateNow, scriptName, Message))
    elif Type == 2:
        if NO_COLORS:
            sys.stderr.write("[%s ERROR] %s %s\n" % (DateNow, scriptName, Message))
        else:
            sys.stderr.write("[%s \033[31mERROR\033[39m] %s %s\n" % (DateNow, scriptName, Message))
    elif Type == 3:
        if NO_COLORS:
            sys.stderr.write("[%s DEBUG] %s %s\n" % (DateNow, scriptName, Message))
        else:
            sys.stderr.write("[%s \033[34mDEBUG\033[39m] %s %s\n" % (DateNow, scriptName, Message))

    # Flush stdout
    sys.stdout.flush()

    # Halt program if requested
    if Halt:
        sys.exit()

# Function to get camera modules count by reading FastCal calibration file
def GetCameraModules(FastCalKeyFilePath):

    # Instanciate ConfigParser
    config = ConfigParser.RawConfigParser()

    # Read FastCal calibration file and prepend a fake [section] to comply with ConfigParser
    config.readfp(StringIO('[calibration]\n' + open(FastCalKeyFilePath, 'r').read()))

    # Return value
    return config.getint('calibration', 'modules')

# Function to get camera modules count by reading FastCal calibration file
def GetImagesCorrections(FastCalKeyFilePath):

    # Instanciate ConfigParser
    config = ConfigParser.RawConfigParser()

    # Read FastCal calibration file and prepend a fake [section] to comply with ConfigParser
    config.readfp(StringIO('[calibration]\n' + open(FastCalKeyFilePath, 'r').read()))

    # Prepare a new imageCorrections container for output
    Output = imageCorrections()

    # Get channels count
    Channels = config.getint('calibration', 'channels')

    # Iterate over possible modules
    for i in range(0, Channels):

        # Append roll
        Output.rolls.append( config.getfloat('calibration', 'roll_%02d' % i) )

        # Append vertical flip
        Output.vflips.append( config.getint('calibration', 'vflip_%02d' % i) )

        # Append horizontal flip
        Output.hflips.append( config.getint('calibration', 'hflip_%02d' % i) )

    # Return value
    return Output

# Function to get image sizes from sensor
def GetImageSizes(FastCalKeyFilePath):

    # Instanciate ConfigParser
    config = ConfigParser.RawConfigParser()

    # Read FastCal calibration file and prepend a fake [section] to comply with ConfigParser
    config.readfp(StringIO('[calibration]\n' + open(FastCalKeyFilePath, 'r').read()))

    # Return values
    return [ config.getint('calibration', 'pixelCorrectionWidth_00'), config.getint('calibration', 'pixelCorrectionHeight_00') ]

# Function to convert a JP4 file into JPEG
def JP4ToJPEG(List, _output, _temp, _half=0):

    # Itertate over paths
    for path in List:

        # Extract filename
        FileName = os.path.splitext(os.path.basename(path))[0]

        # Convert image to dng
        execCommand("OMP_NUM_THREADS=1 movie2dng --no-dng-rotation --dng --stdout %s 1> /dev/null > %s/jpeg/%s.dng" % (path, _temp, FileName))

        # Check if half tile requested
        if _half:

            # Debay dng file and convert it into jpeg
            execCommand("OMP_NUM_THREADS=1 dcraw_half %s/jpeg/%s.dng 1> /dev/null" % (_temp, FileName))

        else:

            # Debay dng file and convert it into jpeg
            execCommand("OMP_NUM_THREADS=1 simple_dcraw %s/jpeg/%s.dng" % (_temp, FileName))

        # Comvert PPM to jpeg
        execCommand("OMP_NUM_THREADS=1 convert %s/jpeg/%s.dng.ppm %s/jpeg/%s.jpeg" % (_temp, FileName, _output, FileName) )

        # Remove temporary dng file
        os.remove("%s/jpeg/%s.dng" % (_temp, FileName))
        os.remove("%s/jpeg/%s.dng.ppm" % (_temp, FileName))

# Function to generate tiles form a crow
def MakeTiles(_input, _output, image_sizes, TILES_SCALE_FACTOR):

    # Extract filename
    FileName = os.path.splitext(os.path.basename(_input))[0]

    # Get image sizes
    image_sizes_width = image_sizes[ 0 ]
    image_sizes_height = image_sizes[ 1 ]

    # Compute jp4 tile sizes
    jp4_image_sizes_width  = image_sizes_width
    jp4_image_sizes_height = ( image_sizes_height + 8 )

    # Compute cropping margins
    tile_1_margin = 8
    tile_2_margin = ( jp4_image_sizes_height + 8 )
    tile_3_margin = ( ( ( jp4_image_sizes_height * 2 ) + 8 ) + 8 )

    # Divide pixel size
    tile_1_margin = ( tile_1_margin / TILES_SCALE_FACTOR )
    tile_2_margin = ( tile_2_margin / TILES_SCALE_FACTOR )
    tile_3_margin = ( tile_3_margin / TILES_SCALE_FACTOR )

    # Divide image size
    image_sizes_width  = ( image_sizes_width / TILES_SCALE_FACTOR )
    image_sizes_height = ( image_sizes_height / TILES_SCALE_FACTOR )

    # Divide jp4 image size
    jp4_image_sizes_width  = ( jp4_image_sizes_width / TILES_SCALE_FACTOR )
    jp4_image_sizes_height = ( jp4_image_sizes_height / TILES_SCALE_FACTOR )

    # Split image
    execCommand("convert -crop %dx%d+0-%d  %s %s/top/%s_0.jpeg" % (jp4_image_sizes_width, jp4_image_sizes_height, tile_1_margin, _input, _output, FileName))
    execCommand("convert -crop %dx%d+0+%d %s %s/mid/%s_1.jpeg" % (jp4_image_sizes_width, image_sizes_height, tile_2_margin,  _input, _output, FileName))
    execCommand("convert -crop %dx%d+0+%d %s %s/bot/%s_2.jpeg" % (jp4_image_sizes_width, image_sizes_height, tile_3_margin,  _input, _output, FileName))

def flipTiles(_tilesdir, ImagesCorr, flip=1, rotate=1):

    # Separate each tiles into lists
    TopList = sorted(glob.glob("%s/top/*.jpeg" % _tilesdir))
    MidList = sorted(glob.glob("%s/mid/*.jpeg" % _tilesdir))
    BotList = sorted(glob.glob("%s/bot/*.jpeg" % _tilesdir))

    # Build a global tile list in right order (Top, Middle, Bottom)
    All_images = TopList + MidList + BotList

    # Module index counter
    _index = 0

    # Iterate over images
    for image in All_images:

        if flip:

            # Check if image need to be flipped verticaly
            if ImagesCorr.vflips[ _index ] == 1:

                # Flip verticaly
                execCommand("convert -flip %s %s" % (image, image))

            # Check if image need to be flipped horizontaly
            if ImagesCorr.hflips[ _index ] == 1:

                # Flip horizontaly
                execCommand("convert -flop %s %s" % (image, image))

        if rotate:

            # Check which rotation direction need to be applyed
            if ImagesCorr.rolls[ _index ] > 0:

                # Rotate clockwise
                execCommand("convert -rotate 90 %s %s" % (image, image))

            elif ImagesCorr.rolls[ _index ] < 0:

                # Rotate counter clockwise
                execCommand("convert -rotate 270 %s %s" % (image, image))

        # Increment module index counter
        _index += 1

# Function to invert a tile
def invertTile( fastCal, input_tile, output_tile, shift, TILES_SCALE_FACTOR, OUTPUT_SCALE_FACTOR ):

    # Retrieve channel #
    EP_CHAN = ( int( os.path.basename( input_tile ).split( '_' )[ 2 ] ) + shift )

    # Extract sensor image sizes from FastCal file
    EP_EQRW = ( fastCal.getint('calibration', 'equirectangularWidth_%02d' % EP_CHAN ) / OUTPUT_SCALE_FACTOR )
    EP_EQRH = ( fastCal.getint('calibration', 'equirectangularHeight_%02d' % EP_CHAN ) / OUTPUT_SCALE_FACTOR )

    # Read angles from FastCal file
    EP_AZIM = ( fastCal.getfloat('calibration', 'azimuth_%02d' % EP_CHAN ) * ( 180 / 3.1415926535 ) )
    EP_HEAD = ( fastCal.getfloat('calibration', 'heading_%02d' % EP_CHAN ) * ( 180 / 3.1415926535 ) )
    EP_ELEV = ( fastCal.getfloat('calibration', 'elevation_%02d' % EP_CHAN ) * ( 180 / 3.1415926535 ) )
    EP_ROLL = ( fastCal.getfloat('calibration', 'roll_%02d' % EP_CHAN ) * ( 180 / 3.1415926535 ) )

    # Read pixel sizes from FastCal file
    X0 = ( fastCal.getfloat('calibration', 'px0_%02d' % EP_CHAN ) / TILES_SCALE_FACTOR )
    Y0 = ( fastCal.getfloat('calibration', 'py0_%02d' % EP_CHAN ) / TILES_SCALE_FACTOR )
    PIXEL_SIZE = fastCal.getfloat('calibration', 'pixelSize_%02d' % EP_CHAN )

    # Read focal length from FastCal file
    F0 = ( fastCal.getfloat('calibration', 'focalLength_%02d' % EP_CHAN ) / TILES_SCALE_FACTOR )

    # Read sensor image dimensions
    MAP_WIDTH  = ( fastCal.getfloat('calibration', 'ImageFullWidth_%02d' % EP_CHAN ) / OUTPUT_SCALE_FACTOR )
    MAP_HEIGHT = ( fastCal.getfloat('calibration', 'ImageFullLength_%02d' % EP_CHAN ) / OUTPUT_SCALE_FACTOR )

    # Read sensor image positions
    TILE_X = ( fastCal.getfloat('calibration', 'XPosition_%02d' % EP_CHAN ) / OUTPUT_SCALE_FACTOR )
    TILE_Y = ( fastCal.getfloat('calibration', 'YPosition_%02d' % EP_CHAN ) / OUTPUT_SCALE_FACTOR )

    # Invert tile
    execCommand( "norama-invert --elphel \
        -i %s \
        -o %s \
        --interpolation bilinearf \
        --threads    1 \
        --eqr-width  %d \
        --eqr-height %d \
        --map-width  %d \
        --map-height %d \
        --sight-x    %.10f \
        --sight-y    %.10f \
        --tile-x     %.10f \
        --tile-y     %.10f \
        --azimuth    %.10f \
        --heading    %.10f \
        --elevation  %.10f \
        --roll       %.10f \
        --focal      %.10f \
        --pixel      %.10f "
    % (
        input_tile,
        output_tile,
        EP_EQRW,
        EP_EQRH,
        MAP_WIDTH,
        MAP_HEIGHT,
        X0,
        Y0,
        TILE_X,
        TILE_Y,
        EP_AZIM,
        EP_HEAD,
        EP_ELEV,
        EP_ROLL,
        F0,
        PIXEL_SIZE
    ) )

# Function to invert tile list
def invertTiles( output_tiles, output_tiles_inverted, fastcal_file, TILES_SCALE_FACTOR, OUTPUT_SCALE_FACTOR):

    # Separate each tiles into lists
    TopList = sorted(glob.glob("%s/top/*.jpeg" % output_tiles))
    MidList = sorted(glob.glob("%s/mid/*.jpeg" % output_tiles))
    BotList = sorted(glob.glob("%s/bot/*.jpeg" % output_tiles))

    # Instanciate ConfigParser
    config = ConfigParser.RawConfigParser()

    # Read FastCal calibration file and prepend a fake [section] to comply with ConfigParser
    config.readfp(StringIO('[calibration]\n' + open(fastcal_file, 'r').read()))

    # Iterate over top tiles
    for tile in TopList:

        # Invert tile
        invertTile( config, tile, "%s/top/%s" % ( output_tiles_inverted, os.path.basename( tile ) ), -1, TILES_SCALE_FACTOR, OUTPUT_SCALE_FACTOR )

    # Iterate over mid tiles
    for tile in MidList:

        # Invert tile
        invertTile( config, tile, "%s/mid/%s" % ( output_tiles_inverted, os.path.basename( tile ) ), 7, TILES_SCALE_FACTOR, OUTPUT_SCALE_FACTOR )

    # Iterate over bottom tiles
    for tile in BotList:

        # Invert tile
        invertTile( config, tile, "%s/bot/%s" % ( output_tiles_inverted, os.path.basename( tile ) ), 15, TILES_SCALE_FACTOR, OUTPUT_SCALE_FACTOR )

# Function to stitch a set of tiles
def StitchPano(_tilesdir, _output, fastcal_file, OUTPUT_SCALE_FACTOR ):

    # Separate each tiles into lists
    TopList = sorted(glob.glob("%s/top/*.jpeg" % _tilesdir))
    MidList = sorted(glob.glob("%s/mid/*.jpeg" % _tilesdir))
    BotList = sorted(glob.glob("%s/bot/*.jpeg" % _tilesdir))

    # Instanciate ConfigParser
    config = ConfigParser.RawConfigParser()

    # Read FastCal calibration file and prepend a fake [section] to comply with ConfigParser
    config.readfp(StringIO('[calibration]\n' + open(fastcal_file, 'r').read()))

    # Get image positions
    EP_MD04 = ( ( config.getint('calibration', 'XPosition_04' ) - config.getint('calibration', 'ImageFullWidth_04' ) ) / OUTPUT_SCALE_FACTOR )
    EP_MD12 = ( ( config.getint('calibration', 'XPosition_12' ) - config.getint('calibration', 'ImageFullWidth_12' ) ) / OUTPUT_SCALE_FACTOR )
    EP_MD20 = ( ( config.getint('calibration', 'XPosition_20' ) - config.getint('calibration', 'ImageFullWidth_20' ) ) / OUTPUT_SCALE_FACTOR )

    # Get image dimensions
    PAN_W = ( config.getint('calibration', 'ImageFullWidth_00' )  / OUTPUT_SCALE_FACTOR )
    PAN_H = ( config.getint('calibration', 'ImageFullLength_00' ) / OUTPUT_SCALE_FACTOR )

    # Stitch panorama
    execCommand("\
        convert -size %dx%d canvas:black \
        %s -geometry +%d+%d -composite -compose lighten \
        %s -geometry +%d+%d -composite -compose lighten \
        %s -geometry +%d+%d -composite -compose lighten \
        %s -geometry +%d+%d -composite -compose lighten \
        %s -geometry +%d+%d -composite -compose lighten \
        %s -geometry +%d+%d -composite -compose lighten \
        %s -geometry +%d+%d -composite -compose lighten \
        %s -geometry +%d+%d -composite -compose lighten \
        %s -geometry +%d+%d -composite -compose lighten \
        %s -geometry +%d+%d -composite -compose lighten \
        %s -geometry +%d+%d -composite -compose lighten \
        %s -geometry +%d+%d -composite -compose lighten \
        %s -geometry +%d+%d -composite -compose lighten \
        %s -geometry +%d+%d -composite -compose lighten \
        %s -geometry +%d+%d -composite -compose lighten \
        %s -geometry +%d+%d -composite -compose lighten \
        %s -geometry +%d+%d -composite -compose lighten \
        %s -geometry +%d+%d -composite -compose lighten \
        %s -geometry +%d+%d -composite -compose lighten \
        %s -geometry +%d+%d -composite -compose lighten \
        %s -geometry +%d+%d -composite -compose lighten \
        %s -geometry +%d+%d -composite -compose lighten \
        %s -geometry +%d+%d -composite -compose lighten \
        %s -geometry +%d+%d -composite -compose lighten \
        %s -geometry +%d+%d -composite -compose lighten \
        %s -geometry +%d+%d -composite -compose lighten \
        %s -geometry +%d+%d -composite -compose lighten \
        %s "
    % (
        PAN_W, PAN_H,
        TopList[ 0 ], ( config.getint('calibration', 'XPosition_00' ) / OUTPUT_SCALE_FACTOR ), ( config.getint('calibration', 'YPosition_00' ) / OUTPUT_SCALE_FACTOR ),
        TopList[ 1 ], ( config.getint('calibration', 'XPosition_01' ) / OUTPUT_SCALE_FACTOR ), ( config.getint('calibration', 'YPosition_01' ) / OUTPUT_SCALE_FACTOR ),
        TopList[ 2 ], ( config.getint('calibration', 'XPosition_02' ) / OUTPUT_SCALE_FACTOR ), ( config.getint('calibration', 'YPosition_02' ) / OUTPUT_SCALE_FACTOR ),
        TopList[ 3 ], ( config.getint('calibration', 'XPosition_03' ) / OUTPUT_SCALE_FACTOR ), ( config.getint('calibration', 'YPosition_03' ) / OUTPUT_SCALE_FACTOR ),
        TopList[ 4 ], ( config.getint('calibration', 'XPosition_04' ) / OUTPUT_SCALE_FACTOR ), ( config.getint('calibration', 'YPosition_04' ) / OUTPUT_SCALE_FACTOR ),
        TopList[ 4 ], EP_MD04, ( config.getint('calibration', 'YPosition_04' ) / OUTPUT_SCALE_FACTOR ),
        TopList[ 5 ], ( config.getint('calibration', 'XPosition_05' ) / OUTPUT_SCALE_FACTOR ), ( config.getint('calibration', 'YPosition_05' ) / OUTPUT_SCALE_FACTOR ),
        TopList[ 6 ], ( config.getint('calibration', 'XPosition_06' ) / OUTPUT_SCALE_FACTOR ), ( config.getint('calibration', 'YPosition_06' ) / OUTPUT_SCALE_FACTOR ),
        TopList[ 7 ], ( config.getint('calibration', 'XPosition_07' ) / OUTPUT_SCALE_FACTOR ), ( config.getint('calibration', 'YPosition_07' ) / OUTPUT_SCALE_FACTOR ),

        MidList[ 0 ], ( config.getint('calibration', 'XPosition_08' ) / OUTPUT_SCALE_FACTOR ), ( config.getint('calibration', 'YPosition_08' ) / OUTPUT_SCALE_FACTOR ),
        MidList[ 1 ], ( config.getint('calibration', 'XPosition_09' ) / OUTPUT_SCALE_FACTOR ), ( config.getint('calibration', 'YPosition_09' ) / OUTPUT_SCALE_FACTOR ),
        MidList[ 2 ], ( config.getint('calibration', 'XPosition_10' ) / OUTPUT_SCALE_FACTOR ), ( config.getint('calibration', 'YPosition_10' ) / OUTPUT_SCALE_FACTOR ),
        MidList[ 3 ], ( config.getint('calibration', 'XPosition_11' ) / OUTPUT_SCALE_FACTOR ), ( config.getint('calibration', 'YPosition_11' ) / OUTPUT_SCALE_FACTOR ),
        MidList[ 4 ], ( config.getint('calibration', 'XPosition_12' ) / OUTPUT_SCALE_FACTOR ), ( config.getint('calibration', 'YPosition_12' ) / OUTPUT_SCALE_FACTOR ),
        MidList[ 4 ], EP_MD12, ( config.getint('calibration', 'YPosition_12' ) / OUTPUT_SCALE_FACTOR ),
        MidList[ 5 ], ( config.getint('calibration', 'XPosition_13' ) / OUTPUT_SCALE_FACTOR ), ( config.getint('calibration', 'YPosition_13' ) / OUTPUT_SCALE_FACTOR ),
        MidList[ 6 ], ( config.getint('calibration', 'XPosition_14' ) / OUTPUT_SCALE_FACTOR ), ( config.getint('calibration', 'YPosition_14' ) / OUTPUT_SCALE_FACTOR ),
        MidList[ 7 ], ( config.getint('calibration', 'XPosition_15' ) / OUTPUT_SCALE_FACTOR ), ( config.getint('calibration', 'YPosition_15' ) / OUTPUT_SCALE_FACTOR ),

        BotList[ 0 ], ( config.getint('calibration', 'XPosition_16' ) / OUTPUT_SCALE_FACTOR ), ( config.getint('calibration', 'YPosition_16' ) / OUTPUT_SCALE_FACTOR ),
        BotList[ 1 ], ( config.getint('calibration', 'XPosition_17' ) / OUTPUT_SCALE_FACTOR ), ( config.getint('calibration', 'YPosition_17' ) / OUTPUT_SCALE_FACTOR ),
        BotList[ 2 ], ( config.getint('calibration', 'XPosition_18' ) / OUTPUT_SCALE_FACTOR ), ( config.getint('calibration', 'YPosition_18' ) / OUTPUT_SCALE_FACTOR ),
        BotList[ 3 ], ( config.getint('calibration', 'XPosition_19' ) / OUTPUT_SCALE_FACTOR ), ( config.getint('calibration', 'YPosition_19' ) / OUTPUT_SCALE_FACTOR ),
        BotList[ 4 ], ( config.getint('calibration', 'XPosition_20' ) / OUTPUT_SCALE_FACTOR ), ( config.getint('calibration', 'YPosition_20' ) / OUTPUT_SCALE_FACTOR ),
        BotList[ 4 ], EP_MD20, ( config.getint('calibration', 'YPosition_20' ) / OUTPUT_SCALE_FACTOR ),
        BotList[ 5 ], ( config.getint('calibration', 'XPosition_21' ) / OUTPUT_SCALE_FACTOR ), ( config.getint('calibration', 'YPosition_21' ) / OUTPUT_SCALE_FACTOR ),
        BotList[ 6 ], ( config.getint('calibration', 'XPosition_22' ) / OUTPUT_SCALE_FACTOR ), ( config.getint('calibration', 'YPosition_22' ) / OUTPUT_SCALE_FACTOR ),
        BotList[ 7 ], ( config.getint('calibration', 'XPosition_23' ) / OUTPUT_SCALE_FACTOR ), ( config.getint('calibration', 'YPosition_23' ) / OUTPUT_SCALE_FACTOR ),

        _output
    ))

# Usage display function
def _usage():
    print """
    Usage: %s <_1 JP4 file path> <Mount point> <Camera MAC> <Master timestamp> <Segment timestamp> [ write tiles 0 | 1]
    """ % os.path.basename( sys.argv[ 0 ] )

# Program entry point function
# pylint: disable=W0603
def main(argv):

    # Check arguments
    if( len( argv ) < 5 ):
        _usage()
        sys.exit( 0 )

    # Parse arguments
    __Input_File__        = argv[ 0 ]
    __PARAM_MOUNT__       = argv[ 1 ]
    __PARAM_MAC__         = argv[ 2 ]
    __PARAM_MASTER__      = argv[ 3 ]
    __PARAM_SEGMENT__     = argv[ 4 ]
    __Write_Tiles__       = (int( argv[ 5 ] ) == 1)
    __Full_Previews__     = (int( argv[ 6 ] ) == 1)

    # Settings
    HALF_ENABLED = 1
    OUTPUT_SCALE_FACTOR = 6

    # Global variables
    TILES_SCALE_FACTOR  = 1

    # Check if half  previews is requested
    if HALF_ENABLED:

        # Adjust tiles scale factor
        TILES_SCALE_FACTOR = 2

        # Check if output scale is lesser than tile scale factor
        if OUTPUT_SCALE_FACTOR < TILES_SCALE_FACTOR:

            # Clamp output scale factor
            OUTPUT_SCALE_FACTOR = TILES_SCALE_FACTOR

    # Check if full previews requested
    if __Full_Previews__:

        # Disable half generation
        HALF_ENABLED = 0

        # Adjust tiles scale factor
        TILES_SCALE_FACTOR = 1

        # Adjust output tiles scale factor
        OUTPUT_SCALE_FACTOR = 1

    # Compute temp folder
    __Temp_Base__  = "/run/shm/rawdata-jp4preview"
    __Temp__       = "%s/%d" %  ( __Temp_Base__, os.getpid() )

    # Compute FastCal key file path
    FastCalKeyFile = "%s/camera/%s/fastcal/calibration.key" % (__PARAM_MOUNT__, __PARAM_MAC__)

    # Get camera modules count
    ModuleCount = GetCameraModules(FastCalKeyFile)

    # Get camera correction parameters
    ImagesCorr = GetImagesCorrections( FastCalKeyFile )

    # Check if temp folder exists
    if not os.path.isdir(__Temp__):

        # Create temp folder
        execCommand("mkdir -p %s/tiles/top" % __Temp__)
        execCommand("mkdir -p %s/tiles/mid" % __Temp__)
        execCommand("mkdir -p %s/tiles/bot" % __Temp__)
        execCommand("mkdir -p %s/jpeg" % __Temp__)

    # Check if all tools are present
    Error = 0

    # Check presence of ImageMagick
    if not which("convert"):
        ShowMessage("ImageMagick not installed, install it with 'sudo apt-get install imagemagick'", 2, 0)
        Error = 1

    # Check presence of dcraw
    if not which("cjpeg"):
        ShowMessage("cjpeg not installed, install it with 'sudo apt-get install libjpeg-turbo-progs'", 2, 0)
        Error = 1

    # Check presence of dcraw
    if not which("djpeg"):
        ShowMessage("djpeg not installed, install it with 'sudo apt-get install libjpeg-turbo-progs'", 2, 0)
        Error = 1

    # Check presence of dcraw
    if not which("dcraw"):
        ShowMessage("dcraw not installed, install it with 'sudo apt-get install dcraw'", 2, 0)
        Error = 1

    # Check presence of movie2dng
    if not which("movie2dng"):
        ShowMessage("movie2dng not installed, see http://wiki.elphel.com/index.php?title=Movie2dng", 2, 0)
        Error = 1

    # Exif if dependencies are not installed
    if Error: return

    # Split segments of file
    parts = __Input_File__.split('/')
    timestamps = parts[-1].rstrip('.jp4').split('_')
    basefolder = parts[-2]

    # Compute timestamp
    ts = "%s_%s" % (timestamps[0], timestamps[1])

    # Create JP4 image element
    __JP4_Image__ = JP4Image(ts, 1, basefolder)

    # Determine base segment folder
    BaseSegmentsFolder = "%s/rawdata/%s/master/%s/segment" % (__PARAM_MOUNT__, __PARAM_MAC__, __PARAM_MASTER__)

    # Compute input jp4 path
    __Input__    = "%s/%s/raw" % (BaseSegmentsFolder, __PARAM_SEGMENT__)

    # Compute output folder
    __Output_Base__   = "%s/%s/preview" % (BaseSegmentsFolder, __PARAM_SEGMENT__)
    __Output_Tiles__ = "%s/tiles" % __Temp__
    __Output_Tiles_Inverted__ = "%s/tiles_inverted" % __Temp__

    # Check if tile writing is specified
    if __Write_Tiles__:

        # Adjust output tiles folder
        __Output_Tiles_Inverted__ = "%s/%s/preview/tiles/%d" % (BaseSegmentsFolder, __PARAM_SEGMENT__, __JP4_Image__.base_folder)

    # Compute output folders
    __Output__   = "%s/%d" % (__Output_Base__, __JP4_Image__.base_folder)
    __Output_Image__ = "%s/%s.jpeg" % (__Output__, __JP4_Image__.timestamp)

    # Get image sizes
    imageSizes = GetImageSizes( FastCalKeyFile )

    # Check if destination file already exists
    if not os.path.isfile(__Output_Image__):

        # Create output folder if not present
        if not os.path.isdir(__Output__):
            os.system("mkdir -p %s" % __Output__)

        # Create output tiles folder if not present
        if not os.path.isdir(__Output_Tiles__):
            os.system("mkdir -p %s" % __Output_Tiles__)
            os.system("mkdir -p %s/top" % __Output_Tiles__)
            os.system("mkdir -p %s/mid" % __Output_Tiles__)
            os.system("mkdir -p %s/bot" % __Output_Tiles__)

        # Create output tiles folder if not present
        if not os.path.isdir(__Output_Tiles_Inverted__):
            os.system("mkdir -p %s" % __Output_Tiles_Inverted__)
            os.system("mkdir -p %s/top" % __Output_Tiles_Inverted__)
            os.system("mkdir -p %s/mid" % __Output_Tiles_Inverted__)
            os.system("mkdir -p %s/bot" % __Output_Tiles_Inverted__)

        # Build list of images to be converted
        JP4ToJPEG_List = []
        for i in range(1, ModuleCount):
            JP4ToJPEG_List.append("%s/%s_%d.jp4" % (__Input__, __JP4_Image__.path_nomod, i))

        # Convert JP4 images to JPEG
        JP4ToJPEG(JP4ToJPEG_List, __Temp__, __Temp__, HALF_ENABLED)

        # Create tiles for previously converted images
        for i in range(1, ModuleCount):
            MakeTiles("%s/jpeg/%s_%d.jpeg" % (__Temp__, __JP4_Image__.timestamp, i), __Output_Tiles__, imageSizes, TILES_SCALE_FACTOR)

        # Flip tiles
        flipTiles(__Output_Tiles__, ImagesCorr, 1, 0)

        # Inver tiles to EQR
        invertTiles( __Output_Tiles__, __Output_Tiles_Inverted__, FastCalKeyFile, TILES_SCALE_FACTOR, OUTPUT_SCALE_FACTOR)

        # Stitch panorama
        StitchPano(__Output_Tiles_Inverted__, __Output_Image__, FastCalKeyFile, OUTPUT_SCALE_FACTOR)

    # Remove temporary files
    if "rawdata-jp4preview" in __Temp__:
        execCommand("rm %s -rf" % __Temp__)

# Program entry point
if __name__ == "__main__":
    main(sys.argv[1:])
