#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
  rawdata-procedures - Camera raw data procedures

  Copyright (c) 2013-2015 FOXEL SA - http://foxel.ch
  Please read <http://foxel.ch/license> for more information.


  Author(s):

       Kevin Velickovic <k.velickovic@foxel.ch>


  This file is part of the FOXEL project <http://foxel.ch>.

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU Affero General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Affero General Public License for more details.

  You should have received a copy of the GNU Affero General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.


  Additional Terms:

       You are required to preserve legal notices and author attributions in
       that material or in the Appropriate Legal Notices displayed by works
       containing it.

       You are required to attribute the work as explained in the "Usage and
       Attribution" section of <http://foxel.ch/license>.
"""

import ConfigParser
import glob
import os
import re
import json
import struct
import sys
from cStringIO import StringIO
from datetime import datetime

# Global variables
STD_OUTPUT = 0

# Main binary file structure parameters
MAIN_TYPE   = 'i i i i h'
MAIN_SIZE   = struct.calcsize(MAIN_TYPE)
MAIN_STRUCT = struct.Struct(MAIN_TYPE)

# Function to print debug messages
def ShowMessage(Message, Type=0, Halt=0, ThreadID=-1):

    # Global variables
    global STD_OUTPUT

    # Check if output is enabled
    if not STD_OUTPUT:
        return

    NO_COLORS = 0

    # Flush stdout
    sys.stdout.flush()

    # Get current date
    DateNow = datetime.now().strftime("%H:%M:%S")

    # Display proper message
    Prepend = ""

    if ThreadID != -1:
        Prepend = "[Thread %d]" % (ThreadID+1)

    if Type == 0:
        if NO_COLORS:
            sys.stdout.write("%s %s[INFO] %s\n" % (DateNow, Prepend, Message))
        else:
            sys.stdout.write("%s \033[32m%s[INFO]\033[39m %s\n" % (DateNow, Prepend, Message))
    elif Type == 1:
        if NO_COLORS:
            sys.stdout.write("%s %s[WARNING] %s\n" % (DateNow, Prepend, Message))
        else:
            sys.stdout.write("%s \033[33m%s[WARNING]\033[39m %s\n" % (DateNow, Prepend, Message))
    elif Type == 2:
        if NO_COLORS:
            sys.stdout.write("%s %s[ERROR] %s\n" % (DateNow, Prepend, Message))
        else:
            sys.stdout.write("%s \033[31m%s[ERROR]\033[39m %s\n" % (DateNow, Prepend, Message))
    elif Type == 3:
        if NO_COLORS:
            sys.stdout.write("%s %s[DEBUG] %s\n" % (DateNow, Prepend, Message))
        else:
            sys.stdout.write("%s \033[34m%s[DEBUG]\033[39m %s\n" % (DateNow, Prepend, Message))

    # Flush stdout
    sys.stdout.flush()

    # Halt program if requested
    if Halt:
        sys.exit()

# Function to get camera modules count by reading FastCal calibration file
def GetCameraModules(FastCalKeyFilePath):

    # Instanciate ConfigParser
    config = ConfigParser.RawConfigParser()

    # Read FastCal calibration file and prepend a fake [section] to comply with ConfigParser
    config.readfp(StringIO('[calibration]\n' + open(FastCalKeyFilePath, 'r').read()))

    # Return value
    return config.getint('calibration', 'modules')

# Usage display function
def _usage():
    print """
    Usage: %s [OPTIONS]

    [Required arguments]
    --mount-point        Base mount directory
    --mac-address        Camera MAC address
    --master-timestamp   Master timestamp

    [Optional arguments]
    --auto-segmented     Auto segmentation executed (master script)
    --output             Show STDOUT logs
    --help               Show this message

    """ % sys.argv[0]

# Program entry point function
def main(argv):

    # Global variables
    global STD_OUTPUT

    # Parse arguments
    Arguments = {}
    Argv_Concat = ' '.join(argv)
    Argv_Flags = Argv_Concat.split('--')

    # Iterate over source args
    for i in Argv_Flags:

        # Check length
        if len(i) > 0:

            # Split by first space
            splited = i.split(' ', 1)

            # Check if argument contains value
            if len(splited) > 1:
                Arguments[splited[0]] = (None if not splited[1] else splited[1].strip())
            else:
                Arguments[splited[0]] =  None

    # Arguments variables
    __MountPoint__      = (None if not 'mount-point' in Arguments else Arguments['mount-point'].rstrip('/'))
    __CameraMAC__       = (None if not 'mac-address' in Arguments else Arguments['mac-address'])
    __MasterTimestamp__ = (None if not 'master-timestamp' in Arguments else Arguments['master-timestamp'])
    __AutoSegmented__   = (1 if 'auto-segmented' in Arguments else 0)
    __Help__            = (1 if 'help' in Arguments else 0)
    STD_OUTPUT          = (1 if 'output' in Arguments else 0)

    # Arguments check
    if (not __MountPoint__ or not __CameraMAC__ or not __MasterTimestamp__) or __Help__:
        _usage()
        sys.exit(0)

    # Check if auto-segmented argument is given
    if not __AutoSegmented__:
        print >> sys.stderr, 'No --auto-segmented argument given, exiting...'
        return

    # Compute paths
    BaseSyncFolder    = "%s/rawdata/%s/master/%s" % (__MountPoint__, __CameraMAC__, __MasterTimestamp__)
    InputFile         = "%s/info/raw/jp4table.bin" % (BaseSyncFolder)
    FastCalKeyFile    = "%s/camera/%s/fastcal/calibration.key" % (__MountPoint__, __CameraMAC__)
    CorruptedPath     = "%s/info/raw/corrupted/integrity" % (BaseSyncFolder)

    # Get camera modules count
    ModuleCount = GetCameraModules(FastCalKeyFile)

    # Debug output
    ShowMessage("Loading jp4table.bin file...")

    # Read state file
    with open(InputFile, "rb") as bin_file:
        BINARY_DATA = bin_file.read()

        # Determine data length
        Len = len(BINARY_DATA)

        # Determine entries count
        Count = Len / MAIN_SIZE

        # Initialize variables
        Offset = MAIN_SIZE
        COMPLETE_TIMESTAMPS = []
        TIMESTAMPS_LIST = []

        # Iterate over entries count
        TEMP_LIST = {}
        for i in range(0, Count):

            # Unpack binary values
            Unpacked = MAIN_STRUCT.unpack( BINARY_DATA[MAIN_SIZE * i : Offset] )

            # Compute string timestamp
            TimeStamp = "%10d_%06d" % (Unpacked[0], Unpacked[1])

            # Check presence of timestamp in list
            if not TimeStamp in TIMESTAMPS_LIST:

                # Insert timestamp to list
                TIMESTAMPS_LIST.append( TimeStamp )

            # Check presence of timestamp in list
            if not (TimeStamp in TEMP_LIST):

                # Insert timestamp to list
                TEMP_LIST[TimeStamp] = [Unpacked[4]]
            else:

                # Check presence of module in timestamp
                if not Unpacked[4] in TEMP_LIST[TimeStamp]:

                    # Insert module to list
                    TEMP_LIST[TimeStamp].append(Unpacked[4])

            # Increment offset
            Offset += MAIN_SIZE

    # Iterate over temporary timestamp list
    for i in TEMP_LIST.keys():

        # Check if all modules are present
        if len(TEMP_LIST[i]) == ModuleCount:

            # Insert timestamp to list
            COMPLETE_TIMESTAMPS.append(i)

    # Clear temporary list
    TEMP_LIST = {}

    # Sort timestamps
    COMPLETE_TIMESTAMPS = sorted(COMPLETE_TIMESTAMPS)

    # Debug output
    ShowMessage("%d entries loaded" % Count)

    # Local integrity corrupted timestamps container
    Integrity_TimeStamps = []

    # Debug output
    ShowMessage("Listing corrupted images timestamps(integrity)...")
    Corr_Count = 0

    # Iterate over corrupted files
    for filePath in glob.glob("%s/*.jp4" % CorruptedPath):

        # Increment counter
        Corr_Count += 1

        # Get file name
        FileName = os.path.basename( filePath )

        # Extract timestamp from file name
        exp = re.match( r'(\d+)_(\d+)_(\d+)\.jp4', FileName)

        # Extract timestamp from JP4 path
        TimeStamp = "%s_%s" % (exp.group(1), exp.group(2))

        # Append timestamp to list
        if not TimeStamp in Integrity_TimeStamps:
            Integrity_TimeStamps.append( TimeStamp )


    # Debug output
    ShowMessage("%d timestamp(s) found in %d image(s)." % (len( Integrity_TimeStamps ), Corr_Count))

    # Find all JSON files
    JSON_Files = glob.glob("%s/rawdata/%s/master/%s/segment/*/info/segment.json" % (__MountPoint__, __CameraMAC__, __MasterTimestamp__))

    # Debug output
    ShowMessage("Updating JSON files...")

    # Iterate over JSON files
    for i in JSON_Files:

        # Open file
        SourceJSON = open(i, 'r')

        # Load JSON file
        json_data = json.load(SourceJSON)

        # Close file
        SourceJSON.close()

        # Get pose sections
        poses = json_data['pose']

        # Iterate over pose sections
        for j in poses:

            # Compute pose timestamp
            PoseTS = '%10d_%06d' % (j['sec'], j['usec'])

            # Check if timestamp is corrupted
            if PoseTS in Integrity_TimeStamps:

                # Tag as corrupt
                j['raw'] = "corrupt"

            else:

                # Check if Pose have associated images
                if PoseTS in TIMESTAMPS_LIST:

                    # Check if pose in complete
                    if PoseTS in COMPLETE_TIMESTAMPS:

                        # Tag as valid
                        j['raw'] = "valid"
                    else:

                        # Tag as trashed
                        j['raw'] = "trash"

                else:

                    # Tag as miss
                    j['raw'] = "miss"

        # Write validated JSON file
        with open(i, 'w') as outfile:
            json.dump(json_data, outfile, sort_keys = True, indent = 4)

    # Debug output
    ShowMessage("Done")

# Program entry point
if __name__ == "__main__":
    main(sys.argv[1:])
