#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
  rawdata-procedures - Camera raw data procedures

  Copyright (c) 2014 FOXEL SA - http://foxel.ch
  Please read <http://foxel.ch/license> for more information.


  Author(s):

       Kevin Velickovic <k.velickovic@foxel.ch>


  This file is part of the FOXEL project <http://foxel.ch>.

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU Affero General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Affero General Public License for more details.

  You should have received a copy of the GNU Affero General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.


  Additional Terms:

       You are required to preserve legal notices and author attributions in
       that material or in the Appropriate Legal Notices displayed by works
       containing it.

       You are required to attribute the work as explained in the "Usage and
       Attribution" section of <http://foxel.ch/license>.
"""

import getopt
import glob
import json
import struct
import sys
from datetime import datetime
from xml.dom.minidom import parse

# Main binary file structure parameters
MAIN_TYPE   = 'i i i i h'
MAIN_SIZE   = struct.calcsize(MAIN_TYPE)
MAIN_STRUCT = struct.Struct(MAIN_TYPE)

# Function to print debug messages
def ShowMessage(Message, Type=0, Halt=0, ThreadID=-1):
    NO_COLORS = 0

    # Disable output
    return

    # Flush stdout
    sys.stdout.flush()

    # Get current date
    DateNow = datetime.now().strftime("%H:%M:%S")

    # Display proper message
    Prepend = ""

    if ThreadID != -1:
        Prepend = "[Thread %d]" % (ThreadID+1)

    if Type == 0:
        if NO_COLORS:
            sys.stdout.write("%s %s[INFO] %s\n" % (DateNow, Prepend, Message))
        else:
            sys.stdout.write("%s \033[32m%s[INFO]\033[39m %s\n" % (DateNow, Prepend, Message))
    elif Type == 1:
        if NO_COLORS:
            sys.stdout.write("%s %s[WARNING] %s\n" % (DateNow, Prepend, Message))
        else:
            sys.stdout.write("%s \033[33m%s[WARNING]\033[39m %s\n" % (DateNow, Prepend, Message))
    elif Type == 2:
        if NO_COLORS:
            sys.stdout.write("%s %s[ERROR] %s\n" % (DateNow, Prepend, Message))
        else:
            sys.stdout.write("%s \033[31m%s[ERROR]\033[39m %s\n" % (DateNow, Prepend, Message))
    elif Type == 3:
        if NO_COLORS:
            sys.stdout.write("%s %s[DEBUG] %s\n" % (DateNow, Prepend, Message))
        else:
            sys.stdout.write("%s \033[34m%s[DEBUG]\033[39m %s\n" % (DateNow, Prepend, Message))

    # Flush stdout
    sys.stdout.flush()

    # Halt program if requested
    if Halt:
        sys.exit()

# Function to get camera modules count by reading correction XML
def GetCameraModules(CorrectionXMLPath):

    # Load XML file
    dom = parse(CorrectionXMLPath)

    # Iterate over XML entries
    for i in dom.getElementsByTagName('entry'):

        # Check if key is 'CAMERAS.cameraIPs.length'
        if i.getAttribute("key") == "CAMERAS.cameraIPs.length":

            # Return value
            return int(i.childNodes[0].data)

# Usage display function
def _usage():
    print """
    Usage: %s [OPTIONS]

    [Required arguments]
    -d --mount-point        Base mount directory
    -m --mac-address        Camera MAC address
    -t --master-timestamp   Master timestamp

    [Optional arguments]
    -h --help               Show this message

    """ % sys.argv[0]

# Program entry point function
def main(argv):

    # Arguments variables
    __MountPoint__      = ""
    __CameraMAC__       = ""
    __MasterTimestamp__ = ""

    # Arguments parser
    try:
        opt, args = getopt.getopt(argv, "hd:m:t:", ["help", "mount-point=", "mac-address=", "master-timestamp="])
        args = args
    except getopt.GetoptError, err:
        print str(err)
        _usage()
        sys.exit(2)
    for o, a in opt:
        if o in ("-h", "--help"):
            _usage()
            sys.exit()
        elif o in ("-d", "--mount-point"):
            __MountPoint__ = a.rstrip('/')
        elif o in ("-m", "--mac-address"):
            __CameraMAC__ = a
        elif o in ("-t", "--master-timestamp"):
            __MasterTimestamp__ = a
        else:
            assert False, "unhandled option"

    # Arguments check
    if not __MountPoint__ or not __CameraMAC__ or not __MasterTimestamp__:
        _usage()
        sys.exit(0)

    # Compute state file path
    BaseSyncFolder    = "%s/camera/%s/raw/sync/%s" % (__MountPoint__, __CameraMAC__, __MasterTimestamp__)
    InputFile         = "%s/info/jp4-mov-timestamps.bin" % (BaseSyncFolder)
    CorrectionXML = "%s/camera/%s/info/imagej-elphel/prefs.xml" % (__MountPoint__, __CameraMAC__)

    # Get camera modules count
    ModuleCount = GetCameraModules(CorrectionXML)

    # Debug output
    ShowMessage("Loading jp4-mov-timestamps.bin file...")

    # Read state file
    with open(InputFile, "rb") as bin_file:
        BINARY_DATA = bin_file.read()

        # Determine data length
        Len = len(BINARY_DATA)

        # Determine entries count
        Count = Len / MAIN_SIZE

        # Initialize variables
        Offset = MAIN_SIZE
        COMPLETE_TIMESTAMPS = []

        # Iterate over entries count
        TEMP_LIST = {}
        for i in range(0, Count):

            # Unpack binary values
            Unpacked = MAIN_STRUCT.unpack( BINARY_DATA[MAIN_SIZE * i : Offset] )

            # Compute string timestamp
            TimeStamp = "%d_%06d" % (Unpacked[0], Unpacked[1])

            # Check presence of timestamp in list
            if not (TimeStamp in TEMP_LIST):

                # Insert timestamp to list
                TEMP_LIST[TimeStamp] = [Unpacked[4]]
            else:

                # Check presence of module in timestamp
                if not Unpacked[4] in TEMP_LIST[TimeStamp]:

                    # Insert module to list
                    TEMP_LIST[TimeStamp].append(Unpacked[4])

            # Increment offset
            Offset += MAIN_SIZE

    # Iterate over temporary timestamp list
    for i in TEMP_LIST.keys():

        # Check if all modules are present
        if len(TEMP_LIST[i]) == ModuleCount:

            # Insert timestamp to list
            COMPLETE_TIMESTAMPS.append(i)

    # Clear temporary list
    TEMP_LIST = {}

    # Sort timestamps
    COMPLETE_TIMESTAMPS = sorted(COMPLETE_TIMESTAMPS)

    # Debug output
    ShowMessage("%d entries loaded" % Count)

    # Find all JSON files
    JSON_Files = glob.glob("%s/camera/%s/raw/segment/%s/*/csps/exports/rawdata-navigator.json" % (__MountPoint__, __CameraMAC__, __MasterTimestamp__))

    # Debug output
    ShowMessage("Updating JSON files...")

    # Iterate over JSON files
    for i in JSON_Files:

        # Open file
        SourceJSON = open(i, 'r')

        # Load JSON file
        json_data = json.load(SourceJSON)

        # Close file
        SourceJSON.close()

        # Get pose sections
        poses = json_data['pose']

        # Iterate over pose sections
        for j in poses:

            # Check if status is unknown
            if j['status'] == 'unknown':

                # Check if timestamp is not trashed
                if '%d_%06d' % (j['sec'], j['usc']) in COMPLETE_TIMESTAMPS:

                    # Tag as valid
                    j['status'] = "validated"
                else:

                    # Tag as trashed
                    j['status'] = "trashed"

        # Write validated JSON file
        with open(i, 'w') as outfile:
            json.dump(json_data, outfile, sort_keys = True, indent = 4)

    # Debug output
    ShowMessage("Done")

# Program entry point
if __name__ == "__main__":
    main(sys.argv[1:])
